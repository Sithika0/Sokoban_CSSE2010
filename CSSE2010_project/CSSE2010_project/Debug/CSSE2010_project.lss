
CSSE2010_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001b74  00001c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  008001a2  008001a2  00001caa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c7f  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d0  00000000  00000000  00004cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a25  00000000  00000000  00006097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  00007abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d19  00000000  00000000  00008280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198b  00000000  00000000  00008f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000a924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__ctors_end>
       4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
       8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
       c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      10:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      14:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_5>
      18:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      20:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      24:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      2c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      30:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      34:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      38:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      3c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      40:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_16>
      44:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      4c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      50:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_20>
      54:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_21>
      58:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      5c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      60:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      64:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      68:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      6c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      70:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      74:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      78:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	54 68       	ori	r21, 0x84	; 132
      7e:	65 20       	and	r6, r5
      80:	77 61       	ori	r23, 0x17	; 23
      82:	6c 6c       	ori	r22, 0xCC	; 204
      84:	20 69       	ori	r18, 0x90	; 144
      86:	73 20       	and	r7, r3
      88:	6f 62       	ori	r22, 0x2F	; 47
      8a:	73 74       	andi	r23, 0x43	; 67
      8c:	72 75       	andi	r23, 0x52	; 82
      8e:	63 74       	andi	r22, 0x43	; 67
      90:	69 6e       	ori	r22, 0xE9	; 233
      92:	67 20       	and	r6, r7
      94:	79 6f       	ori	r23, 0xF9	; 249
      96:	75 2e       	mov	r7, r21
	...

00000099 <__c.2411>:
      99:	50 6c 61 79 65 72 20 63 61 6e 27 74 20 6d 6f 76     Player can't mov
      a9:	65 20 74 68 72 6f 75 67 68 20 77 61 6c 6c 73 2e     e through walls.
	...

000000ba <__c.2409>:
      ba:	54 68 65 20 70 6c 61 79 65 72 20 68 69 74 20 61     The player hit a
      ca:	20 77 61 6c 6c 21 00                                 wall!.

000000d1 <__c.2598>:
      d1:	50 72 65 73 73 20 27 72 27 2f 27 52 27 20 74 6f     Press 'r'/'R' to
      e1:	20 72 65 73 74 61 72 74 2c 20 6f 72 20 27 65 27      restart, or 'e'
      f1:	2f 27 45 27 20 74 6f 20 65 78 69 74 00              /'E' to exit.

000000fe <__c.2596>:
      fe:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000108 <__c.2575>:
     108:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
     118:	6f 6a 65 63 74 20 62 79 20 53 69 74 68 69 6b 61     oject by Sithika
     128:	20 4d 61 6e 6e 61 6b 6b 61 72 61 20 2d 20 34 38      Mannakkara - 48
     138:	30 31 36 37 32 32 00                                016722.

0000013f <title_data>:
     13f:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     14f:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     15f:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000167 <anim_data>:
     167:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     177:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     18f:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     19f:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1b7:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     1c7:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     1df:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1ef:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     207:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     217:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     22f:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     23f:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     257:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     267:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     287:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     297:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     2a7:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     2b7:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     2c7:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     2d7:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

000002f7 <__c.2187>:
     2f7:	1b 5b 3f 32 35 6c 00                                .[?25l.

000002fe <__c.2182>:
     2fe:	1b 5b 25 64 6d 00                                   .[%dm.

00000304 <__c.2172>:
     304:	1b 5b 32 4a 00                                      .[2J.

00000309 <__c.2162>:
     309:	1b 5b 30 6d 00                                      .[0m.

0000030e <__c.2157>:
     30e:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000318 <__ctors_end>:
     318:	11 24       	eor	r1, r1
     31a:	1f be       	out	0x3f, r1	; 63
     31c:	cf ef       	ldi	r28, 0xFF	; 255
     31e:	d8 e0       	ldi	r29, 0x08	; 8
     320:	de bf       	out	0x3e, r29	; 62
     322:	cd bf       	out	0x3d, r28	; 61

00000324 <__do_copy_data>:
     324:	11 e0       	ldi	r17, 0x01	; 1
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b1 e0       	ldi	r27, 0x01	; 1
     32a:	e4 e7       	ldi	r30, 0x74	; 116
     32c:	fb e1       	ldi	r31, 0x1B	; 27
     32e:	02 c0       	rjmp	.+4      	; 0x334 <__do_copy_data+0x10>
     330:	05 90       	lpm	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	a2 3a       	cpi	r26, 0xA2	; 162
     336:	b1 07       	cpc	r27, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <__do_copy_data+0xc>

0000033a <__do_clear_bss>:
     33a:	23 e0       	ldi	r18, 0x03	; 3
     33c:	a2 ea       	ldi	r26, 0xA2	; 162
     33e:	b1 e0       	ldi	r27, 0x01	; 1
     340:	01 c0       	rjmp	.+2      	; 0x344 <.do_clear_bss_start>

00000342 <.do_clear_bss_loop>:
     342:	1d 92       	st	X+, r1

00000344 <.do_clear_bss_start>:
     344:	a6 35       	cpi	r26, 0x56	; 86
     346:	b2 07       	cpc	r27, r18
     348:	e1 f7       	brne	.-8      	; 0x342 <.do_clear_bss_loop>
     34a:	0e 94 75 05 	call	0xaea	; 0xaea <main>
     34e:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <_exit>

00000352 <__bad_interrupt>:
     352:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000356 <init_buttons>:
     356:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
     35a:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <last_button_state>
     35e:	e8 e6       	ldi	r30, 0x68	; 104
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	82 60       	ori	r24, 0x02	; 2
     366:	80 83       	st	Z, r24
     368:	8b b3       	in	r24, 0x1b	; 27
     36a:	82 60       	ori	r24, 0x02	; 2
     36c:	8b bb       	out	0x1b, r24	; 27
     36e:	ec e6       	ldi	r30, 0x6C	; 108
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8f 60       	ori	r24, 0x0F	; 15
     376:	80 83       	st	Z, r24
     378:	08 95       	ret

0000037a <button_pushed>:
     37a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     37e:	88 23       	and	r24, r24
     380:	f9 f0       	breq	.+62     	; 0x3c0 <button_pushed+0x46>
     382:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <button_queue>
     386:	5f b7       	in	r21, 0x3f	; 63
     388:	50 78       	andi	r21, 0x80	; 128
     38a:	f8 94       	cli
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <button_pushed+0x2c>
     390:	29 2f       	mov	r18, r25
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	f9 01       	movw	r30, r18
     396:	ed 55       	subi	r30, 0x5D	; 93
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	40 81       	ld	r20, Z
     39c:	f9 01       	movw	r30, r18
     39e:	ee 55       	subi	r30, 0x5E	; 94
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	40 83       	st	Z, r20
     3a4:	9f 5f       	subi	r25, 0xFF	; 255
     3a6:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
     3aa:	92 17       	cp	r25, r18
     3ac:	88 f3       	brcs	.-30     	; 0x390 <button_pushed+0x16>
     3ae:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__data_end>
     3b2:	91 50       	subi	r25, 0x01	; 1
     3b4:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__data_end>
     3b8:	55 23       	and	r21, r21
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <button_pushed+0x48>
     3bc:	78 94       	sei
     3be:	08 95       	ret
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	08 95       	ret

000003c4 <clear_button_presses>:
     3c4:	8f b7       	in	r24, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
     3cc:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <last_button_state>
     3d0:	88 23       	and	r24, r24
     3d2:	0c f4       	brge	.+2      	; 0x3d6 <clear_button_presses+0x12>
     3d4:	78 94       	sei
     3d6:	08 95       	ret

000003d8 <__vector_5>:
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 93       	push	r18
     3e4:	3f 93       	push	r19
     3e6:	4f 93       	push	r20
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	ef 93       	push	r30
     3ee:	ff 93       	push	r31
     3f0:	43 b1       	in	r20, 0x03	; 3
     3f2:	4f 70       	andi	r20, 0x0F	; 15
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	24 c0       	rjmp	.+72     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     3f8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__data_end>
     3fc:	94 30       	cpi	r25, 0x04	; 4
     3fe:	f8 f4       	brcc	.+62     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     400:	24 2f       	mov	r18, r20
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	08 2e       	mov	r0, r24
     406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     408:	35 95       	asr	r19
     40a:	27 95       	ror	r18
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     410:	20 ff       	sbrs	r18, 0
     412:	15 c0       	rjmp	.+42     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     414:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <last_button_state>
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	08 2e       	mov	r0, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41e:	35 95       	asr	r19
     420:	27 95       	ror	r18
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	20 fd       	sbrc	r18, 0
     428:	0a c0       	rjmp	.+20     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     42a:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__data_end>
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	9e 0f       	add	r25, r30
     432:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__data_end>
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	ed 55       	subi	r30, 0x5D	; 93
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	80 83       	st	Z, r24
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	84 30       	cpi	r24, 0x04	; 4
     442:	d0 f2       	brcs	.-76     	; 0x3f8 <__vector_5+0x20>
     444:	40 93 a7 01 	sts	0x01A7, r20	; 0x8001a7 <last_button_state>
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{
	switch (board[row][col] & OBJECT_MASK)
     460:	90 e1       	ldi	r25, 0x10	; 16
     462:	89 9f       	mul	r24, r25
     464:	f0 01       	movw	r30, r0
     466:	11 24       	eor	r1, r1
     468:	e5 55       	subi	r30, 0x55	; 85
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	e6 0f       	add	r30, r22
     46e:	f1 1d       	adc	r31, r1
     470:	90 81       	ld	r25, Z
     472:	97 70       	andi	r25, 0x07	; 7
     474:	92 30       	cpi	r25, 0x02	; 2
     476:	99 f0       	breq	.+38     	; 0x49e <paint_square+0x3e>
     478:	28 f4       	brcc	.+10     	; 0x484 <paint_square+0x24>
     47a:	99 23       	and	r25, r25
     47c:	41 f0       	breq	.+16     	; 0x48e <paint_square+0x2e>
     47e:	91 30       	cpi	r25, 0x01	; 1
     480:	51 f0       	breq	.+20     	; 0x496 <paint_square+0x36>
     482:	08 95       	ret
     484:	94 30       	cpi	r25, 0x04	; 4
     486:	79 f0       	breq	.+30     	; 0x4a6 <paint_square+0x46>
     488:	96 30       	cpi	r25, 0x06	; 6
     48a:	89 f0       	breq	.+34     	; 0x4ae <paint_square+0x4e>
     48c:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
			break;
     494:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     496:	4f ef       	ldi	r20, 0xFF	; 255
     498:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
			break;
     49c:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     49e:	4c e3       	ldi	r20, 0x3C	; 60
     4a0:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
			break;
     4a4:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     4a6:	4f e0       	ldi	r20, 0x0F	; 15
     4a8:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
			break;
     4ac:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     4ae:	40 ef       	ldi	r20, 0xF0	; 240
     4b0:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
     4b4:	08 95       	ret

000004b6 <initialise_game>:
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(void)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
	#undef W
	#undef T
	#undef B

	// Set the initial player location (for level 1).
	player_row = 5;
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <player_row>
	player_col = 2;
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <player_col>

	// Make the player icon initially invisible.
	player_visible = false;
     4c6:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <player_visible>

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	27 c0       	rjmp	.+78     	; 0x51c <initialise_game+0x66>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     4ce:	8a 2f       	mov	r24, r26
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	27 e0       	ldi	r18, 0x07	; 7
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	28 1b       	sub	r18, r24
     4d8:	39 0b       	sbc	r19, r25
				lv1_layout[row][col];
     4da:	46 2f       	mov	r20, r22
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	e2 95       	swap	r30
     4e2:	f2 95       	swap	r31
     4e4:	f0 7f       	andi	r31, 0xF0	; 240
     4e6:	fe 27       	eor	r31, r30
     4e8:	e0 7f       	andi	r30, 0xF0	; 240
     4ea:	fe 27       	eor	r31, r30
     4ec:	ed 5e       	subi	r30, 0xED	; 237
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	e4 0f       	add	r30, r20
     4f2:	f5 1f       	adc	r31, r21
     4f4:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     4f6:	c9 01       	movw	r24, r18
     4f8:	82 95       	swap	r24
     4fa:	92 95       	swap	r25
     4fc:	90 7f       	andi	r25, 0xF0	; 240
     4fe:	98 27       	eor	r25, r24
     500:	80 7f       	andi	r24, 0xF0	; 240
     502:	98 27       	eor	r25, r24
     504:	85 55       	subi	r24, 0x55	; 85
     506:	9e 4f       	sbci	r25, 0xFE	; 254
     508:	fc 01       	movw	r30, r24
     50a:	e4 0f       	add	r30, r20
     50c:	f5 1f       	adc	r31, r21
     50e:	70 83       	st	Z, r23

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <initialise_game+0x60>
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	60 31       	cpi	r22, 0x10	; 16
     518:	d0 f2       	brcs	.-76     	; 0x4ce <initialise_game+0x18>
	// Make the player icon initially invisible.
	player_visible = false;

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     51a:	af 5f       	subi	r26, 0xFF	; 255
     51c:	a8 30       	cpi	r26, 0x08	; 8
     51e:	d0 f3       	brcs	.-12     	; 0x514 <initialise_game+0x5e>
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	0a c0       	rjmp	.+20     	; 0x538 <initialise_game+0x82>
	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     524:	6c 2f       	mov	r22, r28
     526:	8d 2f       	mov	r24, r29
     528:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     52c:	cf 5f       	subi	r28, 0xFF	; 255
     52e:	01 c0       	rjmp	.+2      	; 0x532 <initialise_game+0x7c>
     530:	c0 e0       	ldi	r28, 0x00	; 0
     532:	c0 31       	cpi	r28, 0x10	; 16
     534:	b8 f3       	brcs	.-18     	; 0x524 <initialise_game+0x6e>
				lv1_layout[row][col];
		}
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     536:	df 5f       	subi	r29, 0xFF	; 255
     538:	d8 30       	cpi	r29, 0x08	; 8
     53a:	d0 f3       	brcs	.-12     	; 0x530 <initialise_game+0x7a>
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
		}
	}
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     542:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <player_visible>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 27       	eor	r24, r25
     54a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <player_visible>
	if (player_visible)
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     552:	40 e1       	ldi	r20, 0x10	; 16
     554:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <player_col>
     558:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <player_row>
     55c:	0e 94 13 04 	call	0x826	; 0x826 <ledmatrix_update_pixel>
     560:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     562:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <player_col>
     566:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <player_row>
     56a:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
     56e:	08 95       	ret

00000570 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	c8 2f       	mov	r28, r24
     57a:	06 2f       	mov	r16, r22
	// |    indicating an invalid move.                                  |
	// | 3. Otherwise push the box and move the player, then clear the   |
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	uint8_t old_row = player_row;
     57c:	d0 91 aa 01 	lds	r29, 0x01AA	; 0x8001aa <player_row>
	uint8_t old_col = player_col;
     580:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <player_col>
	paint_square(player_row, player_col);
     584:	61 2f       	mov	r22, r17
     586:	8d 2f       	mov	r24, r29
     588:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
	player_row += delta_row;
     58c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <player_row>
     590:	8c 0f       	add	r24, r28
     592:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <player_row>
	if (player_row > 200) {
     596:	89 3c       	cpi	r24, 0xC9	; 201
     598:	18 f0       	brcs	.+6      	; 0x5a0 <move_player+0x30>
		player_row = 7;
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <player_row>
	}
	if (player_row > 7) {
     5a0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <player_row>
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	10 f0       	brcs	.+4      	; 0x5ac <move_player+0x3c>
		player_row = 0;
     5a8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <player_row>
	}
	
	player_col += delta_col;
     5ac:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <player_col>
     5b0:	80 0f       	add	r24, r16
     5b2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <player_col>
	if (player_col > 200) {
     5b6:	89 3c       	cpi	r24, 0xC9	; 201
     5b8:	18 f0       	brcs	.+6      	; 0x5c0 <move_player+0x50>
		player_col = 15;
     5ba:	8f e0       	ldi	r24, 0x0F	; 15
     5bc:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <player_col>
	}
	if (player_col > 15) {
     5c0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <player_col>
     5c4:	80 31       	cpi	r24, 0x10	; 16
     5c6:	10 f0       	brcs	.+4      	; 0x5cc <move_player+0x5c>
		player_col = 0;
     5c8:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <player_col>
	}
	
	// Boxes
	uint8_t row_infront = old_row + 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	8d 0f       	add	r24, r29
	uint8_t row_behind = old_row - 1;
     5d0:	9f ef       	ldi	r25, 0xFF	; 255
     5d2:	9d 0f       	add	r25, r29
	uint8_t col_right = old_col + 1;
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	61 0f       	add	r22, r17
	uint8_t col_left = old_col - 1;
     5d8:	3f ef       	ldi	r19, 0xFF	; 255
     5da:	31 0f       	add	r19, r17
	if (delta_row > 0 && delta_col == 0 && board[row_infront][old_col] == BOX) {
     5dc:	1c 16       	cp	r1, r28
     5de:	dc f5       	brge	.+118    	; 0x656 <move_player+0xe6>
     5e0:	01 11       	cpse	r16, r1
     5e2:	39 c0       	rjmp	.+114    	; 0x656 <move_player+0xe6>
     5e4:	a8 2f       	mov	r26, r24
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	41 2f       	mov	r20, r17
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	fd 01       	movw	r30, r26
     5ee:	e2 95       	swap	r30
     5f0:	f2 95       	swap	r31
     5f2:	f0 7f       	andi	r31, 0xF0	; 240
     5f4:	fe 27       	eor	r31, r30
     5f6:	e0 7f       	andi	r30, 0xF0	; 240
     5f8:	fe 27       	eor	r31, r30
     5fa:	e5 55       	subi	r30, 0x55	; 85
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254
     5fe:	e4 0f       	add	r30, r20
     600:	f5 1f       	adc	r31, r21
     602:	70 81       	ld	r23, Z
     604:	72 30       	cpi	r23, 0x02	; 2
     606:	39 f5       	brne	.+78     	; 0x656 <move_player+0xe6>
		// Move box up
		board[row_infront][old_col] = ROOM;
     608:	fd 01       	movw	r30, r26
     60a:	e2 95       	swap	r30
     60c:	f2 95       	swap	r31
     60e:	f0 7f       	andi	r31, 0xF0	; 240
     610:	fe 27       	eor	r31, r30
     612:	e0 7f       	andi	r30, 0xF0	; 240
     614:	fe 27       	eor	r31, r30
     616:	e5 55       	subi	r30, 0x55	; 85
     618:	fe 4f       	sbci	r31, 0xFE	; 254
     61a:	e4 0f       	add	r30, r20
     61c:	f5 1f       	adc	r31, r21
     61e:	10 82       	st	Z, r1
		board[row_infront + 1][old_col] = BOX;
     620:	9d 01       	movw	r18, r26
     622:	2f 5f       	subi	r18, 0xFF	; 255
     624:	3f 4f       	sbci	r19, 0xFF	; 255
     626:	22 95       	swap	r18
     628:	32 95       	swap	r19
     62a:	30 7f       	andi	r19, 0xF0	; 240
     62c:	32 27       	eor	r19, r18
     62e:	20 7f       	andi	r18, 0xF0	; 240
     630:	32 27       	eor	r19, r18
     632:	25 55       	subi	r18, 0x55	; 85
     634:	3e 4f       	sbci	r19, 0xFE	; 254
     636:	f9 01       	movw	r30, r18
     638:	e4 0f       	add	r30, r20
     63a:	f5 1f       	adc	r31, r21
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	90 83       	st	Z, r25
		paint_square(row_infront, player_col);
     640:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <player_col>
     644:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
		paint_square(row_infront + 1, player_col);
     648:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <player_col>
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	8d 0f       	add	r24, r29
     650:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
     654:	97 c0       	rjmp	.+302    	; 0x784 <move_player+0x214>
	} else if (delta_row < 0 && delta_col == 0 && board[row_behind][old_col] == BOX) {
     656:	cc 23       	and	r28, r28
     658:	9c f5       	brge	.+102    	; 0x6c0 <move_player+0x150>
     65a:	01 11       	cpse	r16, r1
     65c:	31 c0       	rjmp	.+98     	; 0x6c0 <move_player+0x150>
     65e:	89 2f       	mov	r24, r25
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	41 2f       	mov	r20, r17
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	fc 01       	movw	r30, r24
     668:	e2 95       	swap	r30
     66a:	f2 95       	swap	r31
     66c:	f0 7f       	andi	r31, 0xF0	; 240
     66e:	fe 27       	eor	r31, r30
     670:	e0 7f       	andi	r30, 0xF0	; 240
     672:	fe 27       	eor	r31, r30
     674:	e5 55       	subi	r30, 0x55	; 85
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	e4 0f       	add	r30, r20
     67a:	f5 1f       	adc	r31, r21
     67c:	20 81       	ld	r18, Z
     67e:	22 30       	cpi	r18, 0x02	; 2
     680:	f9 f4       	brne	.+62     	; 0x6c0 <move_player+0x150>
		// Move box down
		board[row_behind][old_col] = ROOM;
     682:	fc 01       	movw	r30, r24
     684:	e2 95       	swap	r30
     686:	f2 95       	swap	r31
     688:	f0 7f       	andi	r31, 0xF0	; 240
     68a:	fe 27       	eor	r31, r30
     68c:	e0 7f       	andi	r30, 0xF0	; 240
     68e:	fe 27       	eor	r31, r30
     690:	e5 55       	subi	r30, 0x55	; 85
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	e4 0f       	add	r30, r20
     696:	f5 1f       	adc	r31, r21
     698:	10 82       	st	Z, r1
		board[row_behind - 1][old_col] = BOX;
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	82 95       	swap	r24
     69e:	92 95       	swap	r25
     6a0:	90 7f       	andi	r25, 0xF0	; 240
     6a2:	98 27       	eor	r25, r24
     6a4:	80 7f       	andi	r24, 0xF0	; 240
     6a6:	98 27       	eor	r25, r24
     6a8:	85 55       	subi	r24, 0x55	; 85
     6aa:	9e 4f       	sbci	r25, 0xFE	; 254
     6ac:	fc 01       	movw	r30, r24
     6ae:	e4 0f       	add	r30, r20
     6b0:	f5 1f       	adc	r31, r21
     6b2:	20 83       	st	Z, r18
		paint_square(row_behind - 1, old_col);
     6b4:	61 2f       	mov	r22, r17
     6b6:	8e ef       	ldi	r24, 0xFE	; 254
     6b8:	8d 0f       	add	r24, r29
     6ba:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
     6be:	62 c0       	rjmp	.+196    	; 0x784 <move_player+0x214>
	} else if (delta_row == 0 && delta_col > 0 && board[old_row][col_right] == BOX) {
     6c0:	c1 11       	cpse	r28, r1
     6c2:	2f c0       	rjmp	.+94     	; 0x722 <move_player+0x1b2>
     6c4:	10 16       	cp	r1, r16
     6c6:	6c f5       	brge	.+90     	; 0x722 <move_player+0x1b2>
     6c8:	4d 2f       	mov	r20, r29
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	86 2f       	mov	r24, r22
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	fa 01       	movw	r30, r20
     6d2:	e2 95       	swap	r30
     6d4:	f2 95       	swap	r31
     6d6:	f0 7f       	andi	r31, 0xF0	; 240
     6d8:	fe 27       	eor	r31, r30
     6da:	e0 7f       	andi	r30, 0xF0	; 240
     6dc:	fe 27       	eor	r31, r30
     6de:	e5 55       	subi	r30, 0x55	; 85
     6e0:	fe 4f       	sbci	r31, 0xFE	; 254
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	20 81       	ld	r18, Z
     6e8:	22 30       	cpi	r18, 0x02	; 2
     6ea:	d9 f4       	brne	.+54     	; 0x722 <move_player+0x1b2>
		// Move box right
		board[old_row][col_right] = ROOM;
     6ec:	fa 01       	movw	r30, r20
     6ee:	e2 95       	swap	r30
     6f0:	f2 95       	swap	r31
     6f2:	f0 7f       	andi	r31, 0xF0	; 240
     6f4:	fe 27       	eor	r31, r30
     6f6:	e0 7f       	andi	r30, 0xF0	; 240
     6f8:	fe 27       	eor	r31, r30
     6fa:	e5 55       	subi	r30, 0x55	; 85
     6fc:	fe 4f       	sbci	r31, 0xFE	; 254
     6fe:	df 01       	movw	r26, r30
     700:	a8 0f       	add	r26, r24
     702:	b9 1f       	adc	r27, r25
     704:	1c 92       	st	X, r1
		board[old_row][col_right + 1] = BOX;
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	e8 0f       	add	r30, r24
     70a:	f9 1f       	adc	r31, r25
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	80 83       	st	Z, r24
		paint_square(old_row, col_right);
     710:	8d 2f       	mov	r24, r29
     712:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
		paint_square(old_row, col_right + 1);
     716:	62 e0       	ldi	r22, 0x02	; 2
     718:	61 0f       	add	r22, r17
     71a:	8d 2f       	mov	r24, r29
     71c:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
     720:	31 c0       	rjmp	.+98     	; 0x784 <move_player+0x214>
	} else if (delta_row == 0 && delta_col < 0 && board[old_row][col_left] == BOX) {
     722:	c1 11       	cpse	r28, r1
     724:	2f c0       	rjmp	.+94     	; 0x784 <move_player+0x214>
     726:	00 23       	and	r16, r16
     728:	6c f5       	brge	.+90     	; 0x784 <move_player+0x214>
     72a:	4d 2f       	mov	r20, r29
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	83 2f       	mov	r24, r19
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	fa 01       	movw	r30, r20
     734:	e2 95       	swap	r30
     736:	f2 95       	swap	r31
     738:	f0 7f       	andi	r31, 0xF0	; 240
     73a:	fe 27       	eor	r31, r30
     73c:	e0 7f       	andi	r30, 0xF0	; 240
     73e:	fe 27       	eor	r31, r30
     740:	e5 55       	subi	r30, 0x55	; 85
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	e8 0f       	add	r30, r24
     746:	f9 1f       	adc	r31, r25
     748:	20 81       	ld	r18, Z
     74a:	22 30       	cpi	r18, 0x02	; 2
     74c:	d9 f4       	brne	.+54     	; 0x784 <move_player+0x214>
		// Move box left
		board[old_row][col_left] = ROOM;
     74e:	fa 01       	movw	r30, r20
     750:	e2 95       	swap	r30
     752:	f2 95       	swap	r31
     754:	f0 7f       	andi	r31, 0xF0	; 240
     756:	fe 27       	eor	r31, r30
     758:	e0 7f       	andi	r30, 0xF0	; 240
     75a:	fe 27       	eor	r31, r30
     75c:	e5 55       	subi	r30, 0x55	; 85
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	df 01       	movw	r26, r30
     762:	a8 0f       	add	r26, r24
     764:	b9 1f       	adc	r27, r25
     766:	1c 92       	st	X, r1
		board[old_row][col_left - 1] = BOX;
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	e8 0f       	add	r30, r24
     76c:	f9 1f       	adc	r31, r25
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	80 83       	st	Z, r24
		paint_square(old_row, col_left);
     772:	63 2f       	mov	r22, r19
     774:	8d 2f       	mov	r24, r29
     776:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
		paint_square(old_row, col_left - 1);
     77a:	6e ef       	ldi	r22, 0xFE	; 254
     77c:	61 0f       	add	r22, r17
     77e:	8d 2f       	mov	r24, r29
     780:	0e 94 30 02 	call	0x460	; 0x460 <paint_square>
	}
	
	if (board[player_row][player_col] == WALL) {
     784:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <player_row>
     788:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <player_col>
     78c:	90 e1       	ldi	r25, 0x10	; 16
     78e:	e9 9f       	mul	r30, r25
     790:	f0 01       	movw	r30, r0
     792:	11 24       	eor	r1, r1
     794:	e5 55       	subi	r30, 0x55	; 85
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	e8 0f       	add	r30, r24
     79a:	f1 1d       	adc	r31, r1
     79c:	80 81       	ld	r24, Z
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	a1 f5       	brne	.+104    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		player_row = old_row;
     7a2:	d0 93 aa 01 	sts	0x01AA, r29	; 0x8001aa <player_row>
		player_col = old_col;
     7a6:	10 93 a9 01 	sts	0x01A9, r17	; 0x8001a9 <player_col>
		
		clear_terminal();
     7aa:	0e 94 00 09 	call	0x1200	; 0x1200 <clear_terminal>
		move_terminal_cursor(11, 5);
     7ae:	65 e0       	ldi	r22, 0x05	; 5
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	8b e0       	ldi	r24, 0x0B	; 11
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <move_terminal_cursor>
		int random_num = rand() % 3;
     7ba:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <rand>
     7be:	63 e0       	ldi	r22, 0x03	; 3
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
		if (random_num == 0) {
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	51 f4       	brne	.+20     	; 0x7de <move_player+0x26e>
			printf_P(PSTR("The player hit a wall!"));
     7ca:	8a eb       	ldi	r24, 0xBA	; 186
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
			printf_P(PSTR("Player can't move through walls."));
		} else {
			printf_P(PSTR("The wall is obstructing you."));
		}
		
		return false;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	19 c0       	rjmp	.+50     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		clear_terminal();
		move_terminal_cursor(11, 5);
		int random_num = rand() % 3;
		if (random_num == 0) {
			printf_P(PSTR("The player hit a wall!"));
		} else if (random_num == 1) {
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	51 f4       	brne	.+20     	; 0x7f6 <move_player+0x286>
			printf_P(PSTR("Player can't move through walls."));
     7e2:	89 e9       	ldi	r24, 0x99	; 153
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
		} else {
			printf_P(PSTR("The wall is obstructing you."));
		}
		
		return false;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0d c0       	rjmp	.+26     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		if (random_num == 0) {
			printf_P(PSTR("The player hit a wall!"));
		} else if (random_num == 1) {
			printf_P(PSTR("Player can't move through walls."));
		} else {
			printf_P(PSTR("The wall is obstructing you."));
     7f6:	8c e7       	ldi	r24, 0x7C	; 124
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	9f 93       	push	r25
     7fc:	8f 93       	push	r24
     7fe:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
		}
		
		return false;
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	03 c0       	rjmp	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	} else {
		flash_player();
     80a:	0e 94 a1 02 	call	0x542	; 0x542 <flash_player>
		return true;
     80e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <is_game_over>:
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	// <YOUR CODE HERE>.
	return false;
}
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	08 95       	ret

0000081e <init_ledmatrix>:
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	0e 94 ed 06 	call	0xdda	; 0xdda <spi_setup_master>
     824:	08 95       	ret

00000826 <ledmatrix_update_pixel>:
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	60 31       	cpi	r22, 0x10	; 16
     82e:	b0 f4       	brcc	.+44     	; 0x85c <ledmatrix_update_pixel+0x36>
     830:	88 30       	cpi	r24, 0x08	; 8
     832:	a0 f4       	brcc	.+40     	; 0x85c <ledmatrix_update_pixel+0x36>
     834:	14 2f       	mov	r17, r20
     836:	d6 2f       	mov	r29, r22
     838:	c8 2f       	mov	r28, r24
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     840:	8c 2f       	mov	r24, r28
     842:	87 70       	andi	r24, 0x07	; 7
     844:	20 e1       	ldi	r18, 0x10	; 16
     846:	82 9f       	mul	r24, r18
     848:	c0 01       	movw	r24, r0
     84a:	11 24       	eor	r1, r1
     84c:	6d 2f       	mov	r22, r29
     84e:	6f 70       	andi	r22, 0x0F	; 15
     850:	86 2b       	or	r24, r22
     852:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     856:	81 2f       	mov	r24, r17
     858:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	08 95       	ret

00000864 <ledmatrix_update_column>:
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	80 31       	cpi	r24, 0x10	; 16
     86c:	a0 f4       	brcc	.+40     	; 0x896 <ledmatrix_update_column+0x32>
     86e:	8b 01       	movw	r16, r22
     870:	c8 2f       	mov	r28, r24
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     878:	8c 2f       	mov	r24, r28
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     880:	c0 e0       	ldi	r28, 0x00	; 0
     882:	07 c0       	rjmp	.+14     	; 0x892 <ledmatrix_update_column+0x2e>
     884:	f8 01       	movw	r30, r16
     886:	ec 0f       	add	r30, r28
     888:	f1 1d       	adc	r31, r1
     88a:	80 81       	ld	r24, Z
     88c:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     890:	cf 5f       	subi	r28, 0xFF	; 255
     892:	c8 30       	cpi	r28, 0x08	; 8
     894:	b8 f3       	brcs	.-18     	; 0x884 <ledmatrix_update_column+0x20>
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <ledmatrix_shift_display_left>:
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     8aa:	08 95       	ret

000008ac <ledmatrix_clear>:
     8ac:	8f e0       	ldi	r24, 0x0F	; 15
     8ae:	0e 94 19 07 	call	0xe32	; 0xe32 <spi_send_byte>
     8b2:	08 95       	ret

000008b4 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	init_ledmatrix();
     8b4:	0e 94 0f 04 	call	0x81e	; 0x81e <init_ledmatrix>
	init_buttons();
     8b8:	0e 94 ab 01 	call	0x356	; 0x356 <init_buttons>
	init_serial_stdio(19200, false);
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	7b e4       	ldi	r23, 0x4B	; 75
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 9a 06 	call	0xd34	; 0xd34 <init_serial_stdio>
	init_timer0();
     8ca:	0e 94 1f 09 	call	0x123e	; 0x123e <init_timer0>
	init_timer1();
     8ce:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <init_timer1>
	init_timer2();
     8d2:	0e 94 6f 09 	call	0x12de	; 0x12de <init_timer2>

	// Turn on global interrupts.
	sei();
     8d6:	78 94       	sei
     8d8:	08 95       	ret

000008da <start_screen>:
}

void start_screen(void)
{
	// Hide terminal cursor and set display mode to default.
	hide_cursor();
     8da:	0e 94 16 09 	call	0x122c	; 0x122c <hide_cursor>
	normal_display_mode();
     8de:	0e 94 f7 08 	call	0x11ee	; 0x11ee <normal_display_mode>

	// Clear terminal screen and output the title ASCII art.
	clear_terminal();
     8e2:	0e 94 00 09 	call	0x1200	; 0x1200 <clear_terminal>
	display_terminal_title(3, 5);
     8e6:	65 e0       	ldi	r22, 0x05	; 5
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	0e 94 bd 08 	call	0x117a	; 0x117a <display_terminal_title>
	move_terminal_cursor(11, 5);
     8ee:	65 e0       	ldi	r22, 0x05	; 5
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	8b e0       	ldi	r24, 0x0B	; 11
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <move_terminal_cursor>
	// Change this to your name and student number. Remember to remove the
	// chevrons - "<" and ">"!
	printf_P(PSTR("CSSE2010/7201 Project by Sithika Mannakkara - 48016722"));
     8fa:	88 e0       	ldi	r24, 0x08	; 8
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>

	// Setup the start screen on the LED matrix.
	setup_start_screen();
     906:	0e 94 08 08 	call	0x1010	; 0x1010 <setup_start_screen>

	// Clear button presses registered as the result of powering on the
	// I/O board. This is just to work around a minor limitation of the
	// hardware, and is only done here to ensure that the start screen is
	// not skipped when you power cycle the I/O board.
	clear_button_presses();
     90a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <clear_button_presses>
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
	// Wait until a button is pushed, or 's'/'S' is entered.
	while (1)
	{
		// Check for button presses. If any button is pressed, exit
		// the start screen by breaking out of this infinite loop.
		if (button_pushed() != NO_BUTTON_PUSHED)
     912:	0e 94 bd 01 	call	0x37a	; 0x37a <button_pushed>
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	31 f0       	breq	.+12     	; 0x926 <__stack+0x27>
		{
			srand(get_current_time());
     91a:	0e 94 35 09 	call	0x126a	; 0x126a <get_current_time>
     91e:	cb 01       	movw	r24, r22
     920:	0e 94 65 0a 	call	0x14ca	; 0x14ca <srand>
			break;
     924:	08 95       	ret
		}

		// No button was pressed, check if we have terminal inputs.
		if (serial_input_available())
     926:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <serial_input_available>
     92a:	88 23       	and	r24, r24
     92c:	91 f0       	breq	.+36     	; 0x952 <__stack+0x53>
		{
			// Terminal input is available, get the character.
			int serial_input = fgetc(stdin);
     92e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__iob>
     932:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__iob+0x1>
     936:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fgetc>

			// If the input is 's'/'S', exit the start screen by
			// breaking out of this loop.
			if (serial_input == 's' || serial_input == 'S')
     93a:	83 37       	cpi	r24, 0x73	; 115
     93c:	91 05       	cpc	r25, r1
     93e:	19 f0       	breq	.+6      	; 0x946 <__stack+0x47>
     940:	83 35       	cpi	r24, 0x53	; 83
     942:	91 05       	cpc	r25, r1
     944:	31 f4       	brne	.+12     	; 0x952 <__stack+0x53>
			{
				srand(get_current_time());
     946:	0e 94 35 09 	call	0x126a	; 0x126a <get_current_time>
     94a:	cb 01       	movw	r24, r22
     94c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <srand>
				break;
     950:	08 95       	ret
		}

		// No button presses and no 's'/'S' typed into the terminal,
		// we will loop back and do the checks again. We also update
		// the start screen animation on the LED matrix here.
		update_start_screen();
     952:	0e 94 12 08 	call	0x1024	; 0x1024 <update_start_screen>
	}
     956:	dd cf       	rjmp	.-70     	; 0x912 <__stack+0x13>

00000958 <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal.
	hide_cursor();
     958:	0e 94 16 09 	call	0x122c	; 0x122c <hide_cursor>
	clear_terminal();
     95c:	0e 94 00 09 	call	0x1200	; 0x1200 <clear_terminal>

	// Initialise the game and display.
	initialise_game();
     960:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <initialise_game>

	// Clear all button presses and serial inputs, so that potentially
	// buffered inputs aren't going to make it to the new game.
	clear_button_presses();
     964:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <clear_button_presses>
	clear_serial_input_buffer();
     968:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <clear_serial_input_buffer>
     96c:	08 95       	ret

0000096e <play_game>:
}

void play_game(void)
{
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	uint32_t last_flash_time = get_current_time();
     982:	0e 94 35 09 	call	0x126a	; 0x126a <get_current_time>
     986:	4b 01       	movw	r8, r22
     988:	5c 01       	movw	r10, r24

	// We play the game until it's over.
	while (!is_game_over())
     98a:	78 c0       	rjmp	.+240    	; 0xa7c <play_game+0x10e>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     98c:	0e 94 bd 01 	call	0x37a	; 0x37a <button_pushed>
     990:	c8 2f       	mov	r28, r24
		
		// Move the player, see move_player(...) in game.c.
		// Also remember to reset the flash cycle here.
		if (btn == BUTTON0_PUSHED) valid_move = move_player(0, 1);
     992:	81 11       	cpse	r24, r1
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <play_game+0x34>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     99e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		if (btn == BUTTON1_PUSHED) valid_move = move_player(-1, 0);
     9a2:	c1 30       	cpi	r28, 0x01	; 1
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <play_game+0x44>
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     9ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		if (btn == BUTTON2_PUSHED) valid_move = move_player(1, 0);
     9b2:	c2 30       	cpi	r28, 0x02	; 2
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <play_game+0x54>
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     9be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		if (btn == BUTTON3_PUSHED) valid_move = move_player(0, -1);
     9c2:	c3 30       	cpi	r28, 0x03	; 3
     9c4:	31 f4       	brne	.+12     	; 0x9d2 <play_game+0x64>
     9c6:	6f ef       	ldi	r22, 0xFF	; 255
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     9ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		// Now, repeat for the other buttons, and combine with serial
		// inputs.
		if (serial_input_available()) {
     9d2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <serial_input_available>
     9d6:	88 23       	and	r24, r24
     9d8:	b9 f1       	breq	.+110    	; 0xa48 <play_game+0xda>
			int serial_input = fgetc(stdin);
     9da:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__iob>
     9de:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__iob+0x1>
     9e2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fgetc>
     9e6:	ec 01       	movw	r28, r24
			if (serial_input == 'd' || serial_input == 'D') valid_move = move_player(0, 1);
     9e8:	84 36       	cpi	r24, 0x64	; 100
     9ea:	91 05       	cpc	r25, r1
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <play_game+0x86>
     9ee:	84 34       	cpi	r24, 0x44	; 68
     9f0:	91 05       	cpc	r25, r1
     9f2:	31 f4       	brne	.+12     	; 0xa00 <play_game+0x92>
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     9fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
			if (serial_input == 's' || serial_input == 'S') valid_move = move_player(-1, 0);
     a00:	c3 37       	cpi	r28, 0x73	; 115
     a02:	d1 05       	cpc	r29, r1
     a04:	19 f0       	breq	.+6      	; 0xa0c <play_game+0x9e>
     a06:	c3 35       	cpi	r28, 0x53	; 83
     a08:	d1 05       	cpc	r29, r1
     a0a:	31 f4       	brne	.+12     	; 0xa18 <play_game+0xaa>
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     a14:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
			if (serial_input == 'w' || serial_input == 'W') valid_move = move_player(1, 0);
     a18:	c7 37       	cpi	r28, 0x77	; 119
     a1a:	d1 05       	cpc	r29, r1
     a1c:	19 f0       	breq	.+6      	; 0xa24 <play_game+0xb6>
     a1e:	c7 35       	cpi	r28, 0x57	; 87
     a20:	d1 05       	cpc	r29, r1
     a22:	31 f4       	brne	.+12     	; 0xa30 <play_game+0xc2>
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     a2c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
			if (serial_input == 'a' || serial_input == 'A') valid_move = move_player(0, -1);
     a30:	c1 36       	cpi	r28, 0x61	; 97
     a32:	d1 05       	cpc	r29, r1
     a34:	19 f0       	breq	.+6      	; 0xa3c <play_game+0xce>
     a36:	c1 34       	cpi	r28, 0x41	; 65
     a38:	d1 05       	cpc	r29, r1
     a3a:	31 f4       	brne	.+12     	; 0xa48 <play_game+0xda>
     a3c:	6f ef       	ldi	r22, 0xFF	; 255
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 b8 02 	call	0x570	; 0x570 <move_player>
     a44:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		}
		
		// for counting valid moves.
		if (!valid_move) {
     a48:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <valid_move>
     a4c:	81 11       	cpse	r24, r1
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <play_game+0xe8>
			valid_move = true;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valid_move>
		}
		
		// Move box if player is on box

		uint32_t current_time = get_current_time();
     a56:	0e 94 35 09 	call	0x126a	; 0x126a <get_current_time>
     a5a:	6b 01       	movw	r12, r22
     a5c:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
     a5e:	d5 01       	movw	r26, r10
     a60:	c4 01       	movw	r24, r8
     a62:	88 53       	subi	r24, 0x38	; 56
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	af 4f       	sbci	r26, 0xFF	; 255
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	c8 16       	cp	r12, r24
     a6c:	d9 06       	cpc	r13, r25
     a6e:	ea 06       	cpc	r14, r26
     a70:	fb 06       	cpc	r15, r27
     a72:	20 f0       	brcs	.+8      	; 0xa7c <play_game+0x10e>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
     a74:	0e 94 a1 02 	call	0x542	; 0x542 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
     a78:	46 01       	movw	r8, r12
     a7a:	57 01       	movw	r10, r14
void play_game(void)
{
	uint32_t last_flash_time = get_current_time();

	// We play the game until it's over.
	while (!is_game_over())
     a7c:	0e 94 0d 04 	call	0x81a	; 0x81a <is_game_over>
     a80:	88 23       	and	r24, r24
     a82:	09 f4       	brne	.+2      	; 0xa86 <play_game+0x118>
     a84:	83 cf       	rjmp	.-250    	; 0x98c <play_game+0x1e>
			// Update the most recent icon flash time.
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	bf 90       	pop	r11
     a94:	af 90       	pop	r10
     a96:	9f 90       	pop	r9
     a98:	8f 90       	pop	r8
     a9a:	08 95       	ret

00000a9c <handle_game_over>:

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     a9c:	6a e0       	ldi	r22, 0x0A	; 10
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	8e e0       	ldi	r24, 0x0E	; 14
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     aa8:	8e ef       	ldi	r24, 0xFE	; 254
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
	move_terminal_cursor(15, 10);
     ab4:	6a e0       	ldi	r22, 0x0A	; 10
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	8f e0       	ldi	r24, 0x0F	; 15
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, or 'e'/'E' to exit"));
     ac0:	81 ed       	ldi	r24, 0xD1	; 209
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     ad4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <serial_input_available>
     ad8:	88 23       	and	r24, r24
     ada:	e1 f3       	breq	.-8      	; 0xad4 <handle_game_over+0x38>
		{
			serial_input = fgetc(stdin);
     adc:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__iob>
     ae0:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__iob+0x1>
     ae4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fgetc>
		{
			// <YOUR CODE HERE>
		}
		// Now check for other possible inputs.
		
	}
     ae8:	f5 cf       	rjmp	.-22     	; 0xad4 <handle_game_over+0x38>

00000aea <main>:
bool valid_move = true;
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
     aea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
     aee:	0e 94 6d 04 	call	0x8da	; 0x8da <start_screen>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game();
     af2:	0e 94 ac 04 	call	0x958	; 0x958 <new_game>
		play_game();
     af6:	0e 94 b7 04 	call	0x96e	; 0x96e <play_game>
		handle_game_over();
     afa:	0e 94 4e 05 	call	0xa9c	; 0xa9c <handle_game_over>

00000afe <uart_put_char>:
     afe:	cf 93       	push	r28
     b00:	c8 2f       	mov	r28, r24
     b02:	8a 30       	cpi	r24, 0x0A	; 10
     b04:	19 f4       	brne	.+6      	; 0xb0c <uart_put_char+0xe>
     b06:	8d e0       	ldi	r24, 0x0D	; 13
     b08:	0e 94 7f 05 	call	0xafe	; 0xafe <uart_put_char>
     b0c:	9f b7       	in	r25, 0x3f	; 63
     b0e:	90 78       	andi	r25, 0x80	; 128
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <uart_put_char+0x18>
     b12:	99 23       	and	r25, r25
     b14:	29 f1       	breq	.+74     	; 0xb60 <uart_put_char+0x62>
     b16:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	d1 f3       	breq	.-12     	; 0xb12 <uart_put_char+0x14>
     b1e:	f8 94       	cli
     b20:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <out_insert_pos>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8e 0f       	add	r24, r30
     b28:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <out_insert_pos>
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	e2 5c       	subi	r30, 0xC2	; 194
     b30:	fd 4f       	sbci	r31, 0xFD	; 253
     b32:	c0 83       	st	Z, r28
     b34:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <bytes_in_out_buffer>
     b3e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <out_insert_pos>
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	11 f4       	brne	.+4      	; 0xb4a <uart_put_char+0x4c>
     b46:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <out_insert_pos>
     b4a:	e1 ec       	ldi	r30, 0xC1	; 193
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	80 83       	st	Z, r24
     b54:	99 23       	and	r25, r25
     b56:	39 f0       	breq	.+14     	; 0xb66 <uart_put_char+0x68>
     b58:	78 94       	sei
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <uart_put_char+0x6c>
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <uart_put_char+0x6c>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <uart_get_char>:
     b6e:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <bytes_in_input_buffer>
     b72:	88 23       	and	r24, r24
     b74:	e1 f3       	breq	.-8      	; 0xb6e <uart_get_char>
     b76:	2f b7       	in	r18, 0x3f	; 63
     b78:	20 78       	andi	r18, 0x80	; 128
     b7a:	f8 94       	cli
     b7c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <input_insert_pos>
     b80:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <bytes_in_input_buffer>
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	83 1b       	sub	r24, r19
     b88:	91 09       	sbc	r25, r1
     b8a:	5a f4       	brpl	.+22     	; 0xba2 <uart_get_char+0x34>
     b8c:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <input_insert_pos>
     b90:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <bytes_in_input_buffer>
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	e8 1b       	sub	r30, r24
     b98:	f1 09       	sbc	r31, r1
     b9a:	e2 5b       	subi	r30, 0xB2	; 178
     b9c:	fc 4f       	sbci	r31, 0xFC	; 252
     b9e:	80 81       	ld	r24, Z
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <uart_get_char+0x48>
     ba2:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <input_insert_pos>
     ba6:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <bytes_in_input_buffer>
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	e8 1b       	sub	r30, r24
     bae:	f1 09       	sbc	r31, r1
     bb0:	e2 5c       	subi	r30, 0xC2	; 194
     bb2:	fc 4f       	sbci	r31, 0xFC	; 252
     bb4:	80 81       	ld	r24, Z
     bb6:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <bytes_in_input_buffer>
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <bytes_in_input_buffer>
     bc0:	22 23       	and	r18, r18
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <uart_get_char+0x58>
     bc4:	78 94       	sei
     bc6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <first.1835>
     bca:	9b 31       	cpi	r25, 0x1B	; 27
     bcc:	b1 f4       	brne	.+44     	; 0xbfa <uart_get_char+0x8c>
     bce:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <second.1836>
     bd2:	9b 35       	cpi	r25, 0x5B	; 91
     bd4:	91 f4       	brne	.+36     	; 0xbfa <uart_get_char+0x8c>
     bd6:	82 34       	cpi	r24, 0x42	; 66
     bd8:	49 f0       	breq	.+18     	; 0xbec <uart_get_char+0x7e>
     bda:	18 f4       	brcc	.+6      	; 0xbe2 <uart_get_char+0x74>
     bdc:	81 34       	cpi	r24, 0x41	; 65
     bde:	61 f0       	breq	.+24     	; 0xbf8 <uart_get_char+0x8a>
     be0:	0c c0       	rjmp	.+24     	; 0xbfa <uart_get_char+0x8c>
     be2:	83 34       	cpi	r24, 0x43	; 67
     be4:	29 f0       	breq	.+10     	; 0xbf0 <uart_get_char+0x82>
     be6:	84 34       	cpi	r24, 0x44	; 68
     be8:	29 f0       	breq	.+10     	; 0xbf4 <uart_get_char+0x86>
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <uart_get_char+0x8c>
     bec:	83 e7       	ldi	r24, 0x73	; 115
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <uart_get_char+0x8c>
     bf0:	84 e6       	ldi	r24, 0x64	; 100
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <uart_get_char+0x8c>
     bf4:	81 e6       	ldi	r24, 0x61	; 97
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <uart_get_char+0x8c>
     bf8:	87 e7       	ldi	r24, 0x77	; 119
     bfa:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <second.1836>
     bfe:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <first.1835>
     c02:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <second.1836>
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	08 95       	ret

00000c0a <__vector_21>:
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     c22:	88 23       	and	r24, r24
     c24:	29 f1       	breq	.+74     	; 0xc70 <__vector_21+0x66>
     c26:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <out_insert_pos>
     c2a:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <bytes_in_out_buffer>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	82 1b       	sub	r24, r18
     c32:	91 09       	sbc	r25, r1
     c34:	5a f4       	brpl	.+22     	; 0xc4c <__vector_21+0x42>
     c36:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <out_insert_pos>
     c3a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	e8 1b       	sub	r30, r24
     c42:	f1 09       	sbc	r31, r1
     c44:	e3 5c       	subi	r30, 0xC3	; 195
     c46:	fc 4f       	sbci	r31, 0xFC	; 252
     c48:	90 81       	ld	r25, Z
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <__vector_21+0x56>
     c4c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <out_insert_pos>
     c50:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	e8 1b       	sub	r30, r24
     c58:	f1 09       	sbc	r31, r1
     c5a:	e2 5c       	subi	r30, 0xC2	; 194
     c5c:	fd 4f       	sbci	r31, 0xFD	; 253
     c5e:	90 81       	ld	r25, Z
     c60:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <bytes_in_out_buffer>
     c6a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c6e:	05 c0       	rjmp	.+10     	; 0xc7a <__vector_21+0x70>
     c70:	e1 ec       	ldi	r30, 0xC1	; 193
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8f 7d       	andi	r24, 0xDF	; 223
     c78:	80 83       	st	Z, r24
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_20>:
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	cf 93       	push	r28
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     cb6:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <do_echo>
     cba:	88 23       	and	r24, r24
     cbc:	49 f0       	breq	.+18     	; 0xcd0 <__vector_20+0x42>
     cbe:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <bytes_in_out_buffer>
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	29 f0       	breq	.+10     	; 0xcd0 <__vector_20+0x42>
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	8c 2f       	mov	r24, r28
     ccc:	0e 94 7f 05 	call	0xafe	; 0xafe <uart_put_char>
     cd0:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <bytes_in_input_buffer>
     cd4:	80 31       	cpi	r24, 0x10	; 16
     cd6:	20 f0       	brcs	.+8      	; 0xce0 <__vector_20+0x52>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <input_overrun>
     cde:	18 c0       	rjmp	.+48     	; 0xd10 <__vector_20+0x82>
     ce0:	cd 30       	cpi	r28, 0x0D	; 13
     ce2:	09 f4       	brne	.+2      	; 0xce6 <__vector_20+0x58>
     ce4:	ca e0       	ldi	r28, 0x0A	; 10
     ce6:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <input_insert_pos>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	8e 0f       	add	r24, r30
     cee:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <input_insert_pos>
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	e2 5c       	subi	r30, 0xC2	; 194
     cf6:	fc 4f       	sbci	r31, 0xFC	; 252
     cf8:	c0 83       	st	Z, r28
     cfa:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <bytes_in_input_buffer>
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <bytes_in_input_buffer>
     d04:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <input_insert_pos>
     d08:	80 31       	cpi	r24, 0x10	; 16
     d0a:	11 f4       	brne	.+4      	; 0xd10 <__vector_20+0x82>
     d0c:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <input_insert_pos>
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	cf 91       	pop	r28
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <init_serial_stdio>:
     d34:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <out_insert_pos>
     d38:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <bytes_in_out_buffer>
     d3c:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <input_insert_pos>
     d40:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <bytes_in_input_buffer>
     d44:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <input_overrun>
     d48:	40 93 2d 02 	sts	0x022D, r20	; 0x80022d <do_echo>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	aa 1f       	adc	r26, r26
     d56:	bb 1f       	adc	r27, r27
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	aa 1f       	adc	r26, r26
     d5e:	bb 1f       	adc	r27, r27
     d60:	9c 01       	movw	r18, r24
     d62:	ad 01       	movw	r20, r26
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	44 1f       	adc	r20, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	72 e1       	ldi	r23, 0x12	; 18
     d70:	8a e7       	ldi	r24, 0x7A	; 122
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 86 09 	call	0x130c	; 0x130c <__divmodsi4>
     d78:	ba 01       	movw	r22, r20
     d7a:	a9 01       	movw	r20, r18
     d7c:	4f 5f       	subi	r20, 0xFF	; 255
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	6f 4f       	sbci	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	db 01       	movw	r26, r22
     d86:	ca 01       	movw	r24, r20
     d88:	1a f4       	brpl	.+6      	; 0xd90 <init_serial_stdio+0x5c>
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	b5 95       	asr	r27
     d92:	a7 95       	ror	r26
     d94:	97 95       	ror	r25
     d96:	87 95       	ror	r24
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     d9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     da2:	e1 ec       	ldi	r30, 0xC1	; 193
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	88 e1       	ldi	r24, 0x18	; 24
     da8:	80 83       	st	Z, r24
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 83       	st	Z, r24
     db0:	e0 e5       	ldi	r30, 0x50	; 80
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	85 e0       	ldi	r24, 0x05	; 5
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	93 83       	std	Z+3, r25	; 0x03
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret

00000dc2 <serial_input_available>:
     dc2:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <bytes_in_input_buffer>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	91 11       	cpse	r25, r1
     dca:	01 c0       	rjmp	.+2      	; 0xdce <serial_input_available+0xc>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret

00000dd0 <clear_serial_input_buffer>:
     dd0:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <input_insert_pos>
     dd4:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <bytes_in_input_buffer>
     dd8:	08 95       	ret

00000dda <spi_setup_master>:
     dda:	94 b1       	in	r25, 0x04	; 4
     ddc:	90 6b       	ori	r25, 0xB0	; 176
     dde:	94 b9       	out	0x04, r25	; 4
     de0:	95 b1       	in	r25, 0x05	; 5
     de2:	90 61       	ori	r25, 0x10	; 16
     de4:	95 b9       	out	0x05, r25	; 5
     de6:	90 e5       	ldi	r25, 0x50	; 80
     de8:	9c bd       	out	0x2c, r25	; 44
     dea:	88 30       	cpi	r24, 0x08	; 8
     dec:	21 f0       	breq	.+8      	; 0xdf6 <spi_setup_master+0x1c>
     dee:	80 32       	cpi	r24, 0x20	; 32
     df0:	11 f0       	breq	.+4      	; 0xdf6 <spi_setup_master+0x1c>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	19 f4       	brne	.+6      	; 0xdfc <spi_setup_master+0x22>
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9d bd       	out	0x2d, r25	; 45
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <spi_setup_master+0x24>
     dfc:	1d bc       	out	0x2d, r1	; 45
     dfe:	80 32       	cpi	r24, 0x20	; 32
     e00:	69 f0       	breq	.+26     	; 0xe1c <spi_setup_master+0x42>
     e02:	28 f4       	brcc	.+10     	; 0xe0e <spi_setup_master+0x34>
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	71 f0       	breq	.+28     	; 0xe24 <spi_setup_master+0x4a>
     e08:	80 31       	cpi	r24, 0x10	; 16
     e0a:	61 f0       	breq	.+24     	; 0xe24 <spi_setup_master+0x4a>
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <spi_setup_master+0x50>
     e0e:	80 34       	cpi	r24, 0x40	; 64
     e10:	29 f0       	breq	.+10     	; 0xe1c <spi_setup_master+0x42>
     e12:	80 38       	cpi	r24, 0x80	; 128
     e14:	51 f4       	brne	.+20     	; 0xe2a <spi_setup_master+0x50>
     e16:	8c b5       	in	r24, 0x2c	; 44
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	8c bd       	out	0x2c, r24	; 44
     e1c:	8c b5       	in	r24, 0x2c	; 44
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	8c bd       	out	0x2c, r24	; 44
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <spi_setup_master+0x50>
     e24:	8c b5       	in	r24, 0x2c	; 44
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c bd       	out	0x2c, r24	; 44
     e2a:	85 b1       	in	r24, 0x05	; 5
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	85 b9       	out	0x05, r24	; 5
     e30:	08 95       	ret

00000e32 <spi_send_byte>:
     e32:	8e bd       	out	0x2e, r24	; 46
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <spi_send_byte+0x2>
     e3a:	8e b5       	in	r24, 0x2e	; 46
     e3c:	08 95       	ret

00000e3e <display_initial_image>:
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	28 97       	sbiw	r28, 0x08	; 8
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	17 c0       	rjmp	.+46     	; 0xe86 <display_initial_image+0x48>
     e58:	61 2f       	mov	r22, r17
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	69 59       	subi	r22, 0x99	; 153
     e6a:	7e 4f       	sbci	r23, 0xFE	; 254
     e6c:	48 e0       	ldi	r20, 0x08	; 8
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <memcpy_P>
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	81 2f       	mov	r24, r17
     e80:	0e 94 32 04 	call	0x864	; 0x864 <ledmatrix_update_column>
     e84:	1f 5f       	subi	r17, 0xFF	; 255
     e86:	10 31       	cpi	r17, 0x10	; 16
     e88:	38 f3       	brcs	.-50     	; 0xe58 <display_initial_image+0x1a>
     e8a:	28 96       	adiw	r28, 0x08	; 8
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	08 95       	ret

00000e9e <display_next_column>:
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	0e 94 4f 04 	call	0x89e	; 0x89e <ledmatrix_shift_display_left>
     eb6:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <next_column>
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	69 59       	subi	r22, 0x99	; 153
     eca:	7e 4f       	sbci	r23, 0xFE	; 254
     ecc:	48 e0       	ldi	r20, 0x08	; 8
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <memcpy_P>
     ed8:	be 01       	movw	r22, r28
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f e0       	ldi	r24, 0x0F	; 15
     ee0:	0e 94 32 04 	call	0x864	; 0x864 <ledmatrix_update_column>
     ee4:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <next_column>
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	9a 01       	movw	r18, r20
     ef0:	36 95       	lsr	r19
     ef2:	27 95       	ror	r18
     ef4:	ab e7       	ldi	r26, 0x7B	; 123
     ef6:	b4 e1       	ldi	r27, 0x14	; 20
     ef8:	0e 94 a5 09 	call	0x134a	; 0x134a <__umulhisi3>
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	62 e3       	ldi	r22, 0x32	; 50
     f02:	68 9f       	mul	r22, r24
     f04:	90 01       	movw	r18, r0
     f06:	69 9f       	mul	r22, r25
     f08:	30 0d       	add	r19, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	ca 01       	movw	r24, r20
     f0e:	82 1b       	sub	r24, r18
     f10:	93 0b       	sbc	r25, r19
     f12:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <next_column>
     f16:	80 31       	cpi	r24, 0x10	; 16
     f18:	29 f4       	brne	.+10     	; 0xf24 <display_next_column+0x86>
     f1a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <flags>
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flags>
     f24:	28 96       	adiw	r28, 0x08	; 8
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <display_title_pixel>:
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	28 97       	sbiw	r28, 0x08	; 8
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	f6 2e       	mov	r15, r22
     f54:	e4 2e       	mov	r14, r20
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	61 5c       	subi	r22, 0xC1	; 193
     f68:	7e 4f       	sbci	r23, 0xFE	; 254
     f6a:	48 e0       	ldi	r20, 0x08	; 8
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <memcpy_P>
     f76:	0f e3       	ldi	r16, 0x3F	; 63
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	0f 19       	sub	r16, r15
     f7c:	11 09       	sbc	r17, r1
     f7e:	29 81       	ldd	r18, Y+1	; 0x01
     f80:	3a 81       	ldd	r19, Y+2	; 0x02
     f82:	4b 81       	ldd	r20, Y+3	; 0x03
     f84:	5c 81       	ldd	r21, Y+4	; 0x04
     f86:	6d 81       	ldd	r22, Y+5	; 0x05
     f88:	7e 81       	ldd	r23, Y+6	; 0x06
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	98 85       	ldd	r25, Y+8	; 0x08
     f8e:	0e 94 b6 09 	call	0x136c	; 0x136c <__lshrdi3>
     f92:	21 70       	andi	r18, 0x01	; 1
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpdi2_s8>
     fa8:	c1 f0       	breq	.+48     	; 0xfda <display_title_pixel+0xa4>
     faa:	e1 10       	cpse	r14, r1
     fac:	1b c0       	rjmp	.+54     	; 0xfe4 <display_title_pixel+0xae>
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <display_title_pixel+0x9a>
     fb2:	81 2f       	mov	r24, r17
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	fc 01       	movw	r30, r24
     fb8:	e6 56       	subi	r30, 0x66	; 102
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	20 81       	ld	r18, Z
     fbe:	2f 15       	cp	r18, r15
     fc0:	30 f0       	brcs	.+12     	; 0xfce <display_title_pixel+0x98>
     fc2:	fc 01       	movw	r30, r24
     fc4:	ed 56       	subi	r30, 0x6D	; 109
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 81       	ld	r24, Z
     fca:	0e 94 09 09 	call	0x1212	; 0x1212 <set_display_attribute>
     fce:	1f 5f       	subi	r17, 0xFF	; 255
     fd0:	17 30       	cpi	r17, 0x07	; 7
     fd2:	78 f3       	brcs	.-34     	; 0xfb2 <display_title_pixel+0x7c>
     fd4:	ee 24       	eor	r14, r14
     fd6:	e3 94       	inc	r14
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <display_title_pixel+0xae>
     fda:	ee 20       	and	r14, r14
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <display_title_pixel+0xae>
     fde:	0e 94 f7 08 	call	0x11ee	; 0x11ee <normal_display_mode>
     fe2:	e1 2c       	mov	r14, r1
     fe4:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <__iob+0x2>
     fe8:	70 91 53 03 	lds	r23, 0x0353	; 0x800353 <__iob+0x3>
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
     ff4:	8e 2d       	mov	r24, r14
     ff6:	28 96       	adiw	r28, 0x08	; 8
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <setup_start_screen>:
    1010:	0e 94 56 04 	call	0x8ac	; 0x8ac <ledmatrix_clear>
    1014:	0e 94 1f 07 	call	0xe3e	; 0xe3e <display_initial_image>
    1018:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <flags>
    101c:	81 60       	ori	r24, 0x01	; 1
    101e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flags>
    1022:	08 95       	ret

00001024 <update_start_screen>:
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0e 94 35 09 	call	0x126a	; 0x126a <get_current_time>
    1030:	6b 01       	movw	r12, r22
    1032:	7c 01       	movw	r14, r24
    1034:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <flags>
    1038:	80 ff       	sbrs	r24, 0
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <update_start_screen+0x44>
    103c:	c0 92 33 02 	sts	0x0233, r12	; 0x800233 <flashing_start_time>
    1040:	d0 92 34 02 	sts	0x0234, r13	; 0x800234 <flashing_start_time+0x1>
    1044:	e0 92 35 02 	sts	0x0235, r14	; 0x800235 <flashing_start_time+0x2>
    1048:	f0 92 36 02 	sts	0x0236, r15	; 0x800236 <flashing_start_time+0x3>
    104c:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <last_update_time>
    1050:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <last_update_time+0x1>
    1054:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <last_update_time+0x2>
    1058:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <last_update_time+0x3>
    105c:	90 e1       	ldi	r25, 0x10	; 16
    105e:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <next_column>
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flags>
    1068:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <next_column>
    106c:	80 31       	cpi	r24, 0x10	; 16
    106e:	09 f0       	breq	.+2      	; 0x1072 <update_start_screen+0x4e>
    1070:	64 c0       	rjmp	.+200    	; 0x113a <update_start_screen+0x116>
    1072:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <flashing_start_time>
    1076:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <flashing_start_time+0x1>
    107a:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <flashing_start_time+0x2>
    107e:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <flashing_start_time+0x3>
    1082:	ac 01       	movw	r20, r24
    1084:	bd 01       	movw	r22, r26
    1086:	40 53       	subi	r20, 0x30	; 48
    1088:	58 4f       	sbci	r21, 0xF8	; 248
    108a:	6f 4f       	sbci	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	4c 15       	cp	r20, r12
    1090:	5d 05       	cpc	r21, r13
    1092:	6e 05       	cpc	r22, r14
    1094:	7f 05       	cpc	r23, r15
    1096:	58 f4       	brcc	.+22     	; 0x10ae <update_start_screen+0x8a>
    1098:	0e 94 4f 07 	call	0xe9e	; 0xe9e <display_next_column>
    109c:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <last_update_time>
    10a0:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <last_update_time+0x1>
    10a4:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <last_update_time+0x2>
    10a8:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <last_update_time+0x3>
    10ac:	61 c0       	rjmp	.+194    	; 0x1170 <update_start_screen+0x14c>
    10ae:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <flags>
    10b2:	32 2f       	mov	r19, r18
    10b4:	32 70       	andi	r19, 0x02	; 2
    10b6:	21 fd       	sbrc	r18, 1
    10b8:	19 c0       	rjmp	.+50     	; 0x10ec <update_start_screen+0xc8>
    10ba:	88 51       	subi	r24, 0x18	; 24
    10bc:	9c 4f       	sbci	r25, 0xFC	; 252
    10be:	af 4f       	sbci	r26, 0xFF	; 255
    10c0:	bf 4f       	sbci	r27, 0xFF	; 255
    10c2:	8c 15       	cp	r24, r12
    10c4:	9d 05       	cpc	r25, r13
    10c6:	ae 05       	cpc	r26, r14
    10c8:	bf 05       	cpc	r27, r15
    10ca:	80 f4       	brcc	.+32     	; 0x10ec <update_start_screen+0xc8>
    10cc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <display_initial_image>
    10d0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <flags>
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flags>
    10da:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <last_update_time>
    10de:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <last_update_time+0x1>
    10e2:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <last_update_time+0x2>
    10e6:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <last_update_time+0x3>
    10ea:	42 c0       	rjmp	.+132    	; 0x1170 <update_start_screen+0x14c>
    10ec:	31 11       	cpse	r19, r1
    10ee:	40 c0       	rjmp	.+128    	; 0x1170 <update_start_screen+0x14c>
    10f0:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <last_update_time>
    10f4:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <last_update_time+0x1>
    10f8:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <last_update_time+0x2>
    10fc:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <last_update_time+0x3>
    1100:	8c 59       	subi	r24, 0x9C	; 156
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	af 4f       	sbci	r26, 0xFF	; 255
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	8c 15       	cp	r24, r12
    110a:	9d 05       	cpc	r25, r13
    110c:	ae 05       	cpc	r26, r14
    110e:	bf 05       	cpc	r27, r15
    1110:	78 f5       	brcc	.+94     	; 0x1170 <update_start_screen+0x14c>
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	28 27       	eor	r18, r24
    1116:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <flags>
    111a:	22 ff       	sbrs	r18, 2
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <update_start_screen+0x100>
    111e:	0e 94 56 04 	call	0x8ac	; 0x8ac <ledmatrix_clear>
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <update_start_screen+0x104>
    1124:	0e 94 1f 07 	call	0xe3e	; 0xe3e <display_initial_image>
    1128:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <last_update_time>
    112c:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <last_update_time+0x1>
    1130:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <last_update_time+0x2>
    1134:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <last_update_time+0x3>
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <update_start_screen+0x14c>
    113a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <last_update_time>
    113e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <last_update_time+0x1>
    1142:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <last_update_time+0x2>
    1146:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <last_update_time+0x3>
    114a:	88 53       	subi	r24, 0x38	; 56
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	af 4f       	sbci	r26, 0xFF	; 255
    1150:	bf 4f       	sbci	r27, 0xFF	; 255
    1152:	8c 15       	cp	r24, r12
    1154:	9d 05       	cpc	r25, r13
    1156:	ae 05       	cpc	r26, r14
    1158:	bf 05       	cpc	r27, r15
    115a:	50 f4       	brcc	.+20     	; 0x1170 <update_start_screen+0x14c>
    115c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <display_next_column>
    1160:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <last_update_time>
    1164:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <last_update_time+0x1>
    1168:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <last_update_time+0x2>
    116c:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <last_update_time+0x3>
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <display_terminal_title>:
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	f8 2e       	mov	r15, r24
    1186:	06 2f       	mov	r16, r22
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	d0 e0       	ldi	r29, 0x00	; 0
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <display_terminal_title+0x3c>
    118e:	60 2f       	mov	r22, r16
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	8f 2d       	mov	r24, r15
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	81 0f       	add	r24, r17
    1198:	91 1d       	adc	r25, r1
    119a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <move_terminal_cursor>
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <display_terminal_title+0x36>
    11a2:	4d 2f       	mov	r20, r29
    11a4:	6c 2f       	mov	r22, r28
    11a6:	81 2f       	mov	r24, r17
    11a8:	0e 94 9b 07 	call	0xf36	; 0xf36 <display_title_pixel>
    11ac:	d8 2f       	mov	r29, r24
    11ae:	cf 5f       	subi	r28, 0xFF	; 255
    11b0:	c0 34       	cpi	r28, 0x40	; 64
    11b2:	b8 f3       	brcs	.-18     	; 0x11a2 <display_terminal_title+0x28>
    11b4:	1f 5f       	subi	r17, 0xFF	; 255
    11b6:	15 30       	cpi	r17, 0x05	; 5
    11b8:	50 f3       	brcs	.-44     	; 0x118e <display_terminal_title+0x14>
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	08 95       	ret

000011c6 <move_terminal_cursor>:
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	7f 93       	push	r23
    11cc:	6f 93       	push	r22
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	8e e0       	ldi	r24, 0x0E	; 14
    11d6:	93 e0       	ldi	r25, 0x03	; 3
    11d8:	9f 93       	push	r25
    11da:	8f 93       	push	r24
    11dc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	08 95       	ret

000011ee <normal_display_mode>:
    11ee:	89 e0       	ldi	r24, 0x09	; 9
    11f0:	93 e0       	ldi	r25, 0x03	; 3
    11f2:	9f 93       	push	r25
    11f4:	8f 93       	push	r24
    11f6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	08 95       	ret

00001200 <clear_terminal>:
    1200:	84 e0       	ldi	r24, 0x04	; 4
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	9f 93       	push	r25
    1206:	8f 93       	push	r24
    1208:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	08 95       	ret

00001212 <set_display_attribute>:
    1212:	1f 92       	push	r1
    1214:	8f 93       	push	r24
    1216:	8e ef       	ldi	r24, 0xFE	; 254
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	9f 93       	push	r25
    121c:	8f 93       	push	r24
    121e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	08 95       	ret

0000122c <hide_cursor>:
    122c:	87 ef       	ldi	r24, 0xF7	; 247
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <printf_P>
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	08 95       	ret

0000123e <init_timer0>:
    123e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <clock_ticks_ms>
    1242:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <clock_ticks_ms+0x1>
    1246:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <clock_ticks_ms+0x2>
    124a:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <clock_ticks_ms+0x3>
    124e:	16 bc       	out	0x26, r1	; 38
    1250:	8c e7       	ldi	r24, 0x7C	; 124
    1252:	87 bd       	out	0x27, r24	; 39
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	94 bd       	out	0x24, r25	; 36
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	85 bd       	out	0x25, r24	; 37
    125c:	ee e6       	ldi	r30, 0x6E	; 110
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	82 60       	ori	r24, 0x02	; 2
    1264:	80 83       	st	Z, r24
    1266:	95 bb       	out	0x15, r25	; 21
    1268:	08 95       	ret

0000126a <get_current_time>:
    126a:	8f b7       	in	r24, 0x3f	; 63
    126c:	28 2f       	mov	r18, r24
    126e:	20 78       	andi	r18, 0x80	; 128
    1270:	f8 94       	cli
    1272:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <clock_ticks_ms>
    1276:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <clock_ticks_ms+0x1>
    127a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <clock_ticks_ms+0x2>
    127e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <clock_ticks_ms+0x3>
    1282:	22 23       	and	r18, r18
    1284:	09 f0       	breq	.+2      	; 0x1288 <get_current_time+0x1e>
    1286:	78 94       	sei
    1288:	08 95       	ret

0000128a <__vector_16>:
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <clock_ticks_ms>
    12a0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <clock_ticks_ms+0x1>
    12a4:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <clock_ticks_ms+0x2>
    12a8:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <clock_ticks_ms+0x3>
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	a1 1d       	adc	r26, r1
    12b0:	b1 1d       	adc	r27, r1
    12b2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <clock_ticks_ms>
    12b6:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <clock_ticks_ms+0x1>
    12ba:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <clock_ticks_ms+0x2>
    12be:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <clock_ticks_ms+0x3>
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <init_timer1>:
    12d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    12d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    12dc:	08 95       	ret

000012de <init_timer2>:
    12de:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    12e2:	08 95       	ret

000012e4 <__divmodhi4>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	07 2e       	mov	r0, r23
    12e8:	16 f4       	brtc	.+4      	; 0x12ee <__divmodhi4+0xa>
    12ea:	00 94       	com	r0
    12ec:	07 d0       	rcall	.+14     	; 0x12fc <__divmodhi4_neg1>
    12ee:	77 fd       	sbrc	r23, 7
    12f0:	09 d0       	rcall	.+18     	; 0x1304 <__divmodhi4_neg2>
    12f2:	0e 94 de 09 	call	0x13bc	; 0x13bc <__udivmodhi4>
    12f6:	07 fc       	sbrc	r0, 7
    12f8:	05 d0       	rcall	.+10     	; 0x1304 <__divmodhi4_neg2>
    12fa:	3e f4       	brtc	.+14     	; 0x130a <__divmodhi4_exit>

000012fc <__divmodhi4_neg1>:
    12fc:	90 95       	com	r25
    12fe:	81 95       	neg	r24
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	08 95       	ret

00001304 <__divmodhi4_neg2>:
    1304:	70 95       	com	r23
    1306:	61 95       	neg	r22
    1308:	7f 4f       	sbci	r23, 0xFF	; 255

0000130a <__divmodhi4_exit>:
    130a:	08 95       	ret

0000130c <__divmodsi4>:
    130c:	05 2e       	mov	r0, r21
    130e:	97 fb       	bst	r25, 7
    1310:	1e f4       	brtc	.+6      	; 0x1318 <__divmodsi4+0xc>
    1312:	00 94       	com	r0
    1314:	0e 94 9d 09 	call	0x133a	; 0x133a <__negsi2>
    1318:	57 fd       	sbrc	r21, 7
    131a:	07 d0       	rcall	.+14     	; 0x132a <__divmodsi4_neg2>
    131c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__udivmodsi4>
    1320:	07 fc       	sbrc	r0, 7
    1322:	03 d0       	rcall	.+6      	; 0x132a <__divmodsi4_neg2>
    1324:	4e f4       	brtc	.+18     	; 0x1338 <__divmodsi4_exit>
    1326:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__negsi2>

0000132a <__divmodsi4_neg2>:
    132a:	50 95       	com	r21
    132c:	40 95       	com	r20
    132e:	30 95       	com	r19
    1330:	21 95       	neg	r18
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	4f 4f       	sbci	r20, 0xFF	; 255
    1336:	5f 4f       	sbci	r21, 0xFF	; 255

00001338 <__divmodsi4_exit>:
    1338:	08 95       	ret

0000133a <__negsi2>:
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	08 95       	ret

0000134a <__umulhisi3>:
    134a:	a2 9f       	mul	r26, r18
    134c:	b0 01       	movw	r22, r0
    134e:	b3 9f       	mul	r27, r19
    1350:	c0 01       	movw	r24, r0
    1352:	a3 9f       	mul	r26, r19
    1354:	70 0d       	add	r23, r0
    1356:	81 1d       	adc	r24, r1
    1358:	11 24       	eor	r1, r1
    135a:	91 1d       	adc	r25, r1
    135c:	b2 9f       	mul	r27, r18
    135e:	70 0d       	add	r23, r0
    1360:	81 1d       	adc	r24, r1
    1362:	11 24       	eor	r1, r1
    1364:	91 1d       	adc	r25, r1
    1366:	08 95       	ret

00001368 <__ashrdi3>:
    1368:	97 fb       	bst	r25, 7
    136a:	10 f8       	bld	r1, 0

0000136c <__lshrdi3>:
    136c:	16 94       	lsr	r1
    136e:	00 08       	sbc	r0, r0
    1370:	0f 93       	push	r16
    1372:	08 30       	cpi	r16, 0x08	; 8
    1374:	98 f0       	brcs	.+38     	; 0x139c <__lshrdi3+0x30>
    1376:	08 50       	subi	r16, 0x08	; 8
    1378:	23 2f       	mov	r18, r19
    137a:	34 2f       	mov	r19, r20
    137c:	45 2f       	mov	r20, r21
    137e:	56 2f       	mov	r21, r22
    1380:	67 2f       	mov	r22, r23
    1382:	78 2f       	mov	r23, r24
    1384:	89 2f       	mov	r24, r25
    1386:	90 2d       	mov	r25, r0
    1388:	f4 cf       	rjmp	.-24     	; 0x1372 <__lshrdi3+0x6>
    138a:	05 94       	asr	r0
    138c:	97 95       	ror	r25
    138e:	87 95       	ror	r24
    1390:	77 95       	ror	r23
    1392:	67 95       	ror	r22
    1394:	57 95       	ror	r21
    1396:	47 95       	ror	r20
    1398:	37 95       	ror	r19
    139a:	27 95       	ror	r18
    139c:	0a 95       	dec	r16
    139e:	aa f7       	brpl	.-22     	; 0x138a <__lshrdi3+0x1e>
    13a0:	0f 91       	pop	r16
    13a2:	08 95       	ret

000013a4 <__cmpdi2_s8>:
    13a4:	00 24       	eor	r0, r0
    13a6:	a7 fd       	sbrc	r26, 7
    13a8:	00 94       	com	r0
    13aa:	2a 17       	cp	r18, r26
    13ac:	30 05       	cpc	r19, r0
    13ae:	40 05       	cpc	r20, r0
    13b0:	50 05       	cpc	r21, r0
    13b2:	60 05       	cpc	r22, r0
    13b4:	70 05       	cpc	r23, r0
    13b6:	80 05       	cpc	r24, r0
    13b8:	90 05       	cpc	r25, r0
    13ba:	08 95       	ret

000013bc <__udivmodhi4>:
    13bc:	aa 1b       	sub	r26, r26
    13be:	bb 1b       	sub	r27, r27
    13c0:	51 e1       	ldi	r21, 0x11	; 17
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <__udivmodhi4_ep>

000013c4 <__udivmodhi4_loop>:
    13c4:	aa 1f       	adc	r26, r26
    13c6:	bb 1f       	adc	r27, r27
    13c8:	a6 17       	cp	r26, r22
    13ca:	b7 07       	cpc	r27, r23
    13cc:	10 f0       	brcs	.+4      	; 0x13d2 <__udivmodhi4_ep>
    13ce:	a6 1b       	sub	r26, r22
    13d0:	b7 0b       	sbc	r27, r23

000013d2 <__udivmodhi4_ep>:
    13d2:	88 1f       	adc	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	5a 95       	dec	r21
    13d8:	a9 f7       	brne	.-22     	; 0x13c4 <__udivmodhi4_loop>
    13da:	80 95       	com	r24
    13dc:	90 95       	com	r25
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	08 95       	ret

000013e4 <__udivmodsi4>:
    13e4:	a1 e2       	ldi	r26, 0x21	; 33
    13e6:	1a 2e       	mov	r1, r26
    13e8:	aa 1b       	sub	r26, r26
    13ea:	bb 1b       	sub	r27, r27
    13ec:	fd 01       	movw	r30, r26
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <__udivmodsi4_ep>

000013f0 <__udivmodsi4_loop>:
    13f0:	aa 1f       	adc	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	ee 1f       	adc	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	a2 17       	cp	r26, r18
    13fa:	b3 07       	cpc	r27, r19
    13fc:	e4 07       	cpc	r30, r20
    13fe:	f5 07       	cpc	r31, r21
    1400:	20 f0       	brcs	.+8      	; 0x140a <__udivmodsi4_ep>
    1402:	a2 1b       	sub	r26, r18
    1404:	b3 0b       	sbc	r27, r19
    1406:	e4 0b       	sbc	r30, r20
    1408:	f5 0b       	sbc	r31, r21

0000140a <__udivmodsi4_ep>:
    140a:	66 1f       	adc	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	1a 94       	dec	r1
    1414:	69 f7       	brne	.-38     	; 0x13f0 <__udivmodsi4_loop>
    1416:	60 95       	com	r22
    1418:	70 95       	com	r23
    141a:	80 95       	com	r24
    141c:	90 95       	com	r25
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	bd 01       	movw	r22, r26
    1424:	cf 01       	movw	r24, r30
    1426:	08 95       	ret

00001428 <do_rand>:
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	ec 01       	movw	r28, r24
    143e:	68 81       	ld	r22, Y
    1440:	79 81       	ldd	r23, Y+1	; 0x01
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	61 15       	cp	r22, r1
    1448:	71 05       	cpc	r23, r1
    144a:	81 05       	cpc	r24, r1
    144c:	91 05       	cpc	r25, r1
    144e:	21 f4       	brne	.+8      	; 0x1458 <do_rand+0x30>
    1450:	64 e2       	ldi	r22, 0x24	; 36
    1452:	79 ed       	ldi	r23, 0xD9	; 217
    1454:	8b e5       	ldi	r24, 0x5B	; 91
    1456:	97 e0       	ldi	r25, 0x07	; 7
    1458:	2d e1       	ldi	r18, 0x1D	; 29
    145a:	33 ef       	ldi	r19, 0xF3	; 243
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	0e 94 86 09 	call	0x130c	; 0x130c <__divmodsi4>
    1464:	49 01       	movw	r8, r18
    1466:	5a 01       	movw	r10, r20
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	a7 ea       	ldi	r26, 0xA7	; 167
    146e:	b1 e4       	ldi	r27, 0x41	; 65
    1470:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__muluhisi3>
    1474:	6b 01       	movw	r12, r22
    1476:	7c 01       	movw	r14, r24
    1478:	ac ee       	ldi	r26, 0xEC	; 236
    147a:	b4 ef       	ldi	r27, 0xF4	; 244
    147c:	a5 01       	movw	r20, r10
    147e:	94 01       	movw	r18, r8
    1480:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__mulohisi3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8c 0d       	add	r24, r12
    148a:	9d 1d       	adc	r25, r13
    148c:	ae 1d       	adc	r26, r14
    148e:	bf 1d       	adc	r27, r15
    1490:	b7 ff       	sbrs	r27, 7
    1492:	03 c0       	rjmp	.+6      	; 0x149a <do_rand+0x72>
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	a1 09       	sbc	r26, r1
    1498:	b0 48       	sbci	r27, 0x80	; 128
    149a:	88 83       	st	Y, r24
    149c:	99 83       	std	Y+1, r25	; 0x01
    149e:	aa 83       	std	Y+2, r26	; 0x02
    14a0:	bb 83       	std	Y+3, r27	; 0x03
    14a2:	9f 77       	andi	r25, 0x7F	; 127
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	af 90       	pop	r10
    14b4:	9f 90       	pop	r9
    14b6:	8f 90       	pop	r8
    14b8:	08 95       	ret

000014ba <rand_r>:
    14ba:	0e 94 14 0a 	call	0x1428	; 0x1428 <do_rand>
    14be:	08 95       	ret

000014c0 <rand>:
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 14 0a 	call	0x1428	; 0x1428 <do_rand>
    14c8:	08 95       	ret

000014ca <srand>:
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    14d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    14d6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    14da:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    14de:	08 95       	ret

000014e0 <memcpy_P>:
    14e0:	fb 01       	movw	r30, r22
    14e2:	dc 01       	movw	r26, r24
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <memcpy_P+0xa>
    14e6:	05 90       	lpm	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	41 50       	subi	r20, 0x01	; 1
    14ec:	50 40       	sbci	r21, 0x00	; 0
    14ee:	d8 f7       	brcc	.-10     	; 0x14e6 <memcpy_P+0x6>
    14f0:	08 95       	ret

000014f2 <fgetc>:
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
    14f8:	2b 81       	ldd	r18, Y+3	; 0x03
    14fa:	20 ff       	sbrs	r18, 0
    14fc:	33 c0       	rjmp	.+102    	; 0x1564 <fgetc+0x72>
    14fe:	26 ff       	sbrs	r18, 6
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <fgetc+0x24>
    1502:	2f 7b       	andi	r18, 0xBF	; 191
    1504:	2b 83       	std	Y+3, r18	; 0x03
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	9f 83       	std	Y+7, r25	; 0x07
    150e:	8e 83       	std	Y+6, r24	; 0x06
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	29 c0       	rjmp	.+82     	; 0x1568 <fgetc+0x76>
    1516:	22 ff       	sbrs	r18, 2
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <fgetc+0x46>
    151a:	e8 81       	ld	r30, Y
    151c:	f9 81       	ldd	r31, Y+1	; 0x01
    151e:	80 81       	ld	r24, Z
    1520:	08 2e       	mov	r0, r24
    1522:	00 0c       	add	r0, r0
    1524:	99 0b       	sbc	r25, r25
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	19 f4       	brne	.+6      	; 0x1530 <fgetc+0x3e>
    152a:	20 62       	ori	r18, 0x20	; 32
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	1a c0       	rjmp	.+52     	; 0x1564 <fgetc+0x72>
    1530:	31 96       	adiw	r30, 0x01	; 1
    1532:	f9 83       	std	Y+1, r31	; 0x01
    1534:	e8 83       	st	Y, r30
    1536:	0e c0       	rjmp	.+28     	; 0x1554 <fgetc+0x62>
    1538:	ea 85       	ldd	r30, Y+10	; 0x0a
    153a:	fb 85       	ldd	r31, Y+11	; 0x0b
    153c:	09 95       	icall
    153e:	97 ff       	sbrs	r25, 7
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <fgetc+0x62>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	11 f0       	breq	.+4      	; 0x154c <fgetc+0x5a>
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	01 c0       	rjmp	.+2      	; 0x154e <fgetc+0x5c>
    154c:	80 e1       	ldi	r24, 0x10	; 16
    154e:	82 2b       	or	r24, r18
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <fgetc+0x72>
    1554:	2e 81       	ldd	r18, Y+6	; 0x06
    1556:	3f 81       	ldd	r19, Y+7	; 0x07
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	3f 83       	std	Y+7, r19	; 0x07
    155e:	2e 83       	std	Y+6, r18	; 0x06
    1560:	99 27       	eor	r25, r25
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <fgetc+0x76>
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	9f ef       	ldi	r25, 0xFF	; 255
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <fputc>:
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	fb 01       	movw	r30, r22
    1578:	23 81       	ldd	r18, Z+3	; 0x03
    157a:	21 fd       	sbrc	r18, 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <fputc+0x16>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	2c c0       	rjmp	.+88     	; 0x15dc <fputc+0x6e>
    1584:	22 ff       	sbrs	r18, 2
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <fputc+0x46>
    1588:	46 81       	ldd	r20, Z+6	; 0x06
    158a:	57 81       	ldd	r21, Z+7	; 0x07
    158c:	24 81       	ldd	r18, Z+4	; 0x04
    158e:	35 81       	ldd	r19, Z+5	; 0x05
    1590:	42 17       	cp	r20, r18
    1592:	53 07       	cpc	r21, r19
    1594:	44 f4       	brge	.+16     	; 0x15a6 <fputc+0x38>
    1596:	a0 81       	ld	r26, Z
    1598:	b1 81       	ldd	r27, Z+1	; 0x01
    159a:	9d 01       	movw	r18, r26
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	31 83       	std	Z+1, r19	; 0x01
    15a2:	20 83       	st	Z, r18
    15a4:	8c 93       	st	X, r24
    15a6:	26 81       	ldd	r18, Z+6	; 0x06
    15a8:	37 81       	ldd	r19, Z+7	; 0x07
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	37 83       	std	Z+7, r19	; 0x07
    15b0:	26 83       	std	Z+6, r18	; 0x06
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <fputc+0x6e>
    15b4:	8b 01       	movw	r16, r22
    15b6:	ec 01       	movw	r28, r24
    15b8:	fb 01       	movw	r30, r22
    15ba:	00 84       	ldd	r0, Z+8	; 0x08
    15bc:	f1 85       	ldd	r31, Z+9	; 0x09
    15be:	e0 2d       	mov	r30, r0
    15c0:	09 95       	icall
    15c2:	89 2b       	or	r24, r25
    15c4:	e1 f6       	brne	.-72     	; 0x157e <fputc+0x10>
    15c6:	d8 01       	movw	r26, r16
    15c8:	16 96       	adiw	r26, 0x06	; 6
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	17 97       	sbiw	r26, 0x07	; 7
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	17 96       	adiw	r26, 0x07	; 7
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
    15d8:	16 97       	sbiw	r26, 0x06	; 6
    15da:	ce 01       	movw	r24, r28
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	08 95       	ret

000015e6 <printf_P>:
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 ef       	ldi	r30, 0xF9	; 249
    15ec:	fa e0       	ldi	r31, 0x0A	; 10
    15ee:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__prologue_saves__+0x1c>
    15f2:	ae 01       	movw	r20, r28
    15f4:	49 5f       	subi	r20, 0xF9	; 249
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	da 01       	movw	r26, r20
    15fa:	6d 91       	ld	r22, X+
    15fc:	7d 91       	ld	r23, X+
    15fe:	ad 01       	movw	r20, r26
    1600:	00 e5       	ldi	r16, 0x50	; 80
    1602:	13 e0       	ldi	r17, 0x03	; 3
    1604:	f8 01       	movw	r30, r16
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	dc 01       	movw	r26, r24
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	2c 91       	ld	r18, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	28 60       	ori	r18, 0x08	; 8
    1614:	13 96       	adiw	r26, 0x03	; 3
    1616:	2c 93       	st	X, r18
    1618:	0e 94 19 0b 	call	0x1632	; 0x1632 <vfprintf>
    161c:	d8 01       	movw	r26, r16
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	ed 91       	ld	r30, X+
    1622:	fc 91       	ld	r31, X
    1624:	13 97       	sbiw	r26, 0x03	; 3
    1626:	23 81       	ldd	r18, Z+3	; 0x03
    1628:	27 7f       	andi	r18, 0xF7	; 247
    162a:	23 83       	std	Z+3, r18	; 0x03
    162c:	e4 e0       	ldi	r30, 0x04	; 4
    162e:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__epilogue_restores__+0x1c>

00001632 <vfprintf>:
    1632:	ab e0       	ldi	r26, 0x0B	; 11
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e1       	ldi	r30, 0x1F	; 31
    1638:	fb e0       	ldi	r31, 0x0B	; 11
    163a:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__prologue_saves__>
    163e:	6c 01       	movw	r12, r24
    1640:	7b 01       	movw	r14, r22
    1642:	8a 01       	movw	r16, r20
    1644:	fc 01       	movw	r30, r24
    1646:	17 82       	std	Z+7, r1	; 0x07
    1648:	16 82       	std	Z+6, r1	; 0x06
    164a:	83 81       	ldd	r24, Z+3	; 0x03
    164c:	81 ff       	sbrs	r24, 1
    164e:	cc c1       	rjmp	.+920    	; 0x19e8 <vfprintf+0x3b6>
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	3c 01       	movw	r6, r24
    1656:	f6 01       	movw	r30, r12
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	f7 01       	movw	r30, r14
    165c:	93 fd       	sbrc	r25, 3
    165e:	85 91       	lpm	r24, Z+
    1660:	93 ff       	sbrs	r25, 3
    1662:	81 91       	ld	r24, Z+
    1664:	7f 01       	movw	r14, r30
    1666:	88 23       	and	r24, r24
    1668:	09 f4       	brne	.+2      	; 0x166c <vfprintf+0x3a>
    166a:	ba c1       	rjmp	.+884    	; 0x19e0 <vfprintf+0x3ae>
    166c:	85 32       	cpi	r24, 0x25	; 37
    166e:	39 f4       	brne	.+14     	; 0x167e <vfprintf+0x4c>
    1670:	93 fd       	sbrc	r25, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	93 ff       	sbrs	r25, 3
    1676:	81 91       	ld	r24, Z+
    1678:	7f 01       	movw	r14, r30
    167a:	85 32       	cpi	r24, 0x25	; 37
    167c:	29 f4       	brne	.+10     	; 0x1688 <vfprintf+0x56>
    167e:	b6 01       	movw	r22, r12
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    1686:	e7 cf       	rjmp	.-50     	; 0x1656 <vfprintf+0x24>
    1688:	91 2c       	mov	r9, r1
    168a:	21 2c       	mov	r2, r1
    168c:	31 2c       	mov	r3, r1
    168e:	ff e1       	ldi	r31, 0x1F	; 31
    1690:	f3 15       	cp	r31, r3
    1692:	d8 f0       	brcs	.+54     	; 0x16ca <vfprintf+0x98>
    1694:	8b 32       	cpi	r24, 0x2B	; 43
    1696:	79 f0       	breq	.+30     	; 0x16b6 <vfprintf+0x84>
    1698:	38 f4       	brcc	.+14     	; 0x16a8 <vfprintf+0x76>
    169a:	80 32       	cpi	r24, 0x20	; 32
    169c:	79 f0       	breq	.+30     	; 0x16bc <vfprintf+0x8a>
    169e:	83 32       	cpi	r24, 0x23	; 35
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <vfprintf+0x98>
    16a2:	23 2d       	mov	r18, r3
    16a4:	20 61       	ori	r18, 0x10	; 16
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <vfprintf+0xb0>
    16a8:	8d 32       	cpi	r24, 0x2D	; 45
    16aa:	61 f0       	breq	.+24     	; 0x16c4 <vfprintf+0x92>
    16ac:	80 33       	cpi	r24, 0x30	; 48
    16ae:	69 f4       	brne	.+26     	; 0x16ca <vfprintf+0x98>
    16b0:	23 2d       	mov	r18, r3
    16b2:	21 60       	ori	r18, 0x01	; 1
    16b4:	16 c0       	rjmp	.+44     	; 0x16e2 <vfprintf+0xb0>
    16b6:	83 2d       	mov	r24, r3
    16b8:	82 60       	ori	r24, 0x02	; 2
    16ba:	38 2e       	mov	r3, r24
    16bc:	e3 2d       	mov	r30, r3
    16be:	e4 60       	ori	r30, 0x04	; 4
    16c0:	3e 2e       	mov	r3, r30
    16c2:	2a c0       	rjmp	.+84     	; 0x1718 <vfprintf+0xe6>
    16c4:	f3 2d       	mov	r31, r3
    16c6:	f8 60       	ori	r31, 0x08	; 8
    16c8:	1d c0       	rjmp	.+58     	; 0x1704 <vfprintf+0xd2>
    16ca:	37 fc       	sbrc	r3, 7
    16cc:	2d c0       	rjmp	.+90     	; 0x1728 <vfprintf+0xf6>
    16ce:	20 ed       	ldi	r18, 0xD0	; 208
    16d0:	28 0f       	add	r18, r24
    16d2:	2a 30       	cpi	r18, 0x0A	; 10
    16d4:	40 f0       	brcs	.+16     	; 0x16e6 <vfprintf+0xb4>
    16d6:	8e 32       	cpi	r24, 0x2E	; 46
    16d8:	b9 f4       	brne	.+46     	; 0x1708 <vfprintf+0xd6>
    16da:	36 fc       	sbrc	r3, 6
    16dc:	81 c1       	rjmp	.+770    	; 0x19e0 <vfprintf+0x3ae>
    16de:	23 2d       	mov	r18, r3
    16e0:	20 64       	ori	r18, 0x40	; 64
    16e2:	32 2e       	mov	r3, r18
    16e4:	19 c0       	rjmp	.+50     	; 0x1718 <vfprintf+0xe6>
    16e6:	36 fe       	sbrs	r3, 6
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <vfprintf+0xc4>
    16ea:	8a e0       	ldi	r24, 0x0A	; 10
    16ec:	98 9e       	mul	r9, r24
    16ee:	20 0d       	add	r18, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	92 2e       	mov	r9, r18
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <vfprintf+0xe6>
    16f6:	ea e0       	ldi	r30, 0x0A	; 10
    16f8:	2e 9e       	mul	r2, r30
    16fa:	20 0d       	add	r18, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	22 2e       	mov	r2, r18
    1700:	f3 2d       	mov	r31, r3
    1702:	f0 62       	ori	r31, 0x20	; 32
    1704:	3f 2e       	mov	r3, r31
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <vfprintf+0xe6>
    1708:	8c 36       	cpi	r24, 0x6C	; 108
    170a:	21 f4       	brne	.+8      	; 0x1714 <vfprintf+0xe2>
    170c:	83 2d       	mov	r24, r3
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	38 2e       	mov	r3, r24
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0xe6>
    1714:	88 36       	cpi	r24, 0x68	; 104
    1716:	41 f4       	brne	.+16     	; 0x1728 <vfprintf+0xf6>
    1718:	f7 01       	movw	r30, r14
    171a:	93 fd       	sbrc	r25, 3
    171c:	85 91       	lpm	r24, Z+
    171e:	93 ff       	sbrs	r25, 3
    1720:	81 91       	ld	r24, Z+
    1722:	7f 01       	movw	r14, r30
    1724:	81 11       	cpse	r24, r1
    1726:	b3 cf       	rjmp	.-154    	; 0x168e <vfprintf+0x5c>
    1728:	98 2f       	mov	r25, r24
    172a:	9f 7d       	andi	r25, 0xDF	; 223
    172c:	95 54       	subi	r25, 0x45	; 69
    172e:	93 30       	cpi	r25, 0x03	; 3
    1730:	28 f4       	brcc	.+10     	; 0x173c <vfprintf+0x10a>
    1732:	0c 5f       	subi	r16, 0xFC	; 252
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	9f e3       	ldi	r25, 0x3F	; 63
    1738:	99 83       	std	Y+1, r25	; 0x01
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x124>
    173c:	83 36       	cpi	r24, 0x63	; 99
    173e:	31 f0       	breq	.+12     	; 0x174c <vfprintf+0x11a>
    1740:	83 37       	cpi	r24, 0x73	; 115
    1742:	71 f0       	breq	.+28     	; 0x1760 <vfprintf+0x12e>
    1744:	83 35       	cpi	r24, 0x53	; 83
    1746:	09 f0       	breq	.+2      	; 0x174a <vfprintf+0x118>
    1748:	59 c0       	rjmp	.+178    	; 0x17fc <vfprintf+0x1ca>
    174a:	21 c0       	rjmp	.+66     	; 0x178e <vfprintf+0x15c>
    174c:	f8 01       	movw	r30, r16
    174e:	80 81       	ld	r24, Z
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	0e 5f       	subi	r16, 0xFE	; 254
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	88 24       	eor	r8, r8
    1758:	83 94       	inc	r8
    175a:	91 2c       	mov	r9, r1
    175c:	53 01       	movw	r10, r6
    175e:	13 c0       	rjmp	.+38     	; 0x1786 <vfprintf+0x154>
    1760:	28 01       	movw	r4, r16
    1762:	f2 e0       	ldi	r31, 0x02	; 2
    1764:	4f 0e       	add	r4, r31
    1766:	51 1c       	adc	r5, r1
    1768:	f8 01       	movw	r30, r16
    176a:	a0 80       	ld	r10, Z
    176c:	b1 80       	ldd	r11, Z+1	; 0x01
    176e:	36 fe       	sbrs	r3, 6
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <vfprintf+0x146>
    1772:	69 2d       	mov	r22, r9
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x14a>
    1778:	6f ef       	ldi	r22, 0xFF	; 255
    177a:	7f ef       	ldi	r23, 0xFF	; 255
    177c:	c5 01       	movw	r24, r10
    177e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <strnlen>
    1782:	4c 01       	movw	r8, r24
    1784:	82 01       	movw	r16, r4
    1786:	f3 2d       	mov	r31, r3
    1788:	ff 77       	andi	r31, 0x7F	; 127
    178a:	3f 2e       	mov	r3, r31
    178c:	16 c0       	rjmp	.+44     	; 0x17ba <vfprintf+0x188>
    178e:	28 01       	movw	r4, r16
    1790:	22 e0       	ldi	r18, 0x02	; 2
    1792:	42 0e       	add	r4, r18
    1794:	51 1c       	adc	r5, r1
    1796:	f8 01       	movw	r30, r16
    1798:	a0 80       	ld	r10, Z
    179a:	b1 80       	ldd	r11, Z+1	; 0x01
    179c:	36 fe       	sbrs	r3, 6
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <vfprintf+0x174>
    17a0:	69 2d       	mov	r22, r9
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x178>
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	7f ef       	ldi	r23, 0xFF	; 255
    17aa:	c5 01       	movw	r24, r10
    17ac:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <strnlen_P>
    17b0:	4c 01       	movw	r8, r24
    17b2:	f3 2d       	mov	r31, r3
    17b4:	f0 68       	ori	r31, 0x80	; 128
    17b6:	3f 2e       	mov	r3, r31
    17b8:	82 01       	movw	r16, r4
    17ba:	33 fc       	sbrc	r3, 3
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <vfprintf+0x1c2>
    17be:	82 2d       	mov	r24, r2
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	88 16       	cp	r8, r24
    17c4:	99 06       	cpc	r9, r25
    17c6:	b0 f4       	brcc	.+44     	; 0x17f4 <vfprintf+0x1c2>
    17c8:	b6 01       	movw	r22, r12
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    17d2:	2a 94       	dec	r2
    17d4:	f4 cf       	rjmp	.-24     	; 0x17be <vfprintf+0x18c>
    17d6:	f5 01       	movw	r30, r10
    17d8:	37 fc       	sbrc	r3, 7
    17da:	85 91       	lpm	r24, Z+
    17dc:	37 fe       	sbrs	r3, 7
    17de:	81 91       	ld	r24, Z+
    17e0:	5f 01       	movw	r10, r30
    17e2:	b6 01       	movw	r22, r12
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    17ea:	21 10       	cpse	r2, r1
    17ec:	2a 94       	dec	r2
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	82 1a       	sub	r8, r18
    17f2:	91 08       	sbc	r9, r1
    17f4:	81 14       	cp	r8, r1
    17f6:	91 04       	cpc	r9, r1
    17f8:	71 f7       	brne	.-36     	; 0x17d6 <vfprintf+0x1a4>
    17fa:	e8 c0       	rjmp	.+464    	; 0x19cc <vfprintf+0x39a>
    17fc:	84 36       	cpi	r24, 0x64	; 100
    17fe:	11 f0       	breq	.+4      	; 0x1804 <vfprintf+0x1d2>
    1800:	89 36       	cpi	r24, 0x69	; 105
    1802:	41 f5       	brne	.+80     	; 0x1854 <vfprintf+0x222>
    1804:	f8 01       	movw	r30, r16
    1806:	37 fe       	sbrs	r3, 7
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <vfprintf+0x1e6>
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	0c 5f       	subi	r16, 0xFC	; 252
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <vfprintf+0x1f6>
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	07 2e       	mov	r0, r23
    181e:	00 0c       	add	r0, r0
    1820:	88 0b       	sbc	r24, r24
    1822:	99 0b       	sbc	r25, r25
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	f3 2d       	mov	r31, r3
    182a:	ff 76       	andi	r31, 0x6F	; 111
    182c:	3f 2e       	mov	r3, r31
    182e:	97 ff       	sbrs	r25, 7
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x212>
    1832:	90 95       	com	r25
    1834:	80 95       	com	r24
    1836:	70 95       	com	r23
    1838:	61 95       	neg	r22
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	8f 4f       	sbci	r24, 0xFF	; 255
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	f0 68       	ori	r31, 0x80	; 128
    1842:	3f 2e       	mov	r3, r31
    1844:	2a e0       	ldi	r18, 0x0A	; 10
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	a3 01       	movw	r20, r6
    184a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__ultoa_invert>
    184e:	88 2e       	mov	r8, r24
    1850:	86 18       	sub	r8, r6
    1852:	45 c0       	rjmp	.+138    	; 0x18de <vfprintf+0x2ac>
    1854:	85 37       	cpi	r24, 0x75	; 117
    1856:	31 f4       	brne	.+12     	; 0x1864 <vfprintf+0x232>
    1858:	23 2d       	mov	r18, r3
    185a:	2f 7e       	andi	r18, 0xEF	; 239
    185c:	b2 2e       	mov	r11, r18
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	25 c0       	rjmp	.+74     	; 0x18ae <vfprintf+0x27c>
    1864:	93 2d       	mov	r25, r3
    1866:	99 7f       	andi	r25, 0xF9	; 249
    1868:	b9 2e       	mov	r11, r25
    186a:	8f 36       	cpi	r24, 0x6F	; 111
    186c:	c1 f0       	breq	.+48     	; 0x189e <vfprintf+0x26c>
    186e:	18 f4       	brcc	.+6      	; 0x1876 <vfprintf+0x244>
    1870:	88 35       	cpi	r24, 0x58	; 88
    1872:	79 f0       	breq	.+30     	; 0x1892 <vfprintf+0x260>
    1874:	b5 c0       	rjmp	.+362    	; 0x19e0 <vfprintf+0x3ae>
    1876:	80 37       	cpi	r24, 0x70	; 112
    1878:	19 f0       	breq	.+6      	; 0x1880 <vfprintf+0x24e>
    187a:	88 37       	cpi	r24, 0x78	; 120
    187c:	21 f0       	breq	.+8      	; 0x1886 <vfprintf+0x254>
    187e:	b0 c0       	rjmp	.+352    	; 0x19e0 <vfprintf+0x3ae>
    1880:	e9 2f       	mov	r30, r25
    1882:	e0 61       	ori	r30, 0x10	; 16
    1884:	be 2e       	mov	r11, r30
    1886:	b4 fe       	sbrs	r11, 4
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <vfprintf+0x272>
    188a:	fb 2d       	mov	r31, r11
    188c:	f4 60       	ori	r31, 0x04	; 4
    188e:	bf 2e       	mov	r11, r31
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <vfprintf+0x272>
    1892:	34 fe       	sbrs	r3, 4
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <vfprintf+0x278>
    1896:	29 2f       	mov	r18, r25
    1898:	26 60       	ori	r18, 0x06	; 6
    189a:	b2 2e       	mov	r11, r18
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x278>
    189e:	28 e0       	ldi	r18, 0x08	; 8
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <vfprintf+0x27c>
    18a4:	20 e1       	ldi	r18, 0x10	; 16
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <vfprintf+0x27c>
    18aa:	20 e1       	ldi	r18, 0x10	; 16
    18ac:	32 e0       	ldi	r19, 0x02	; 2
    18ae:	f8 01       	movw	r30, r16
    18b0:	b7 fe       	sbrs	r11, 7
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <vfprintf+0x290>
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	0c 5f       	subi	r16, 0xFC	; 252
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <vfprintf+0x29c>
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 5f       	subi	r16, 0xFE	; 254
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	a3 01       	movw	r20, r6
    18d0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__ultoa_invert>
    18d4:	88 2e       	mov	r8, r24
    18d6:	86 18       	sub	r8, r6
    18d8:	fb 2d       	mov	r31, r11
    18da:	ff 77       	andi	r31, 0x7F	; 127
    18dc:	3f 2e       	mov	r3, r31
    18de:	36 fe       	sbrs	r3, 6
    18e0:	0d c0       	rjmp	.+26     	; 0x18fc <vfprintf+0x2ca>
    18e2:	23 2d       	mov	r18, r3
    18e4:	2e 7f       	andi	r18, 0xFE	; 254
    18e6:	a2 2e       	mov	r10, r18
    18e8:	89 14       	cp	r8, r9
    18ea:	58 f4       	brcc	.+22     	; 0x1902 <vfprintf+0x2d0>
    18ec:	34 fe       	sbrs	r3, 4
    18ee:	0b c0       	rjmp	.+22     	; 0x1906 <vfprintf+0x2d4>
    18f0:	32 fc       	sbrc	r3, 2
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <vfprintf+0x2d4>
    18f4:	83 2d       	mov	r24, r3
    18f6:	8e 7e       	andi	r24, 0xEE	; 238
    18f8:	a8 2e       	mov	r10, r24
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <vfprintf+0x2d4>
    18fc:	b8 2c       	mov	r11, r8
    18fe:	a3 2c       	mov	r10, r3
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <vfprintf+0x2d6>
    1902:	b8 2c       	mov	r11, r8
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x2d6>
    1906:	b9 2c       	mov	r11, r9
    1908:	a4 fe       	sbrs	r10, 4
    190a:	0f c0       	rjmp	.+30     	; 0x192a <vfprintf+0x2f8>
    190c:	fe 01       	movw	r30, r28
    190e:	e8 0d       	add	r30, r8
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	80 33       	cpi	r24, 0x30	; 48
    1916:	21 f4       	brne	.+8      	; 0x1920 <vfprintf+0x2ee>
    1918:	9a 2d       	mov	r25, r10
    191a:	99 7e       	andi	r25, 0xE9	; 233
    191c:	a9 2e       	mov	r10, r25
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <vfprintf+0x300>
    1920:	a2 fe       	sbrs	r10, 2
    1922:	06 c0       	rjmp	.+12     	; 0x1930 <vfprintf+0x2fe>
    1924:	b3 94       	inc	r11
    1926:	b3 94       	inc	r11
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <vfprintf+0x300>
    192a:	8a 2d       	mov	r24, r10
    192c:	86 78       	andi	r24, 0x86	; 134
    192e:	09 f0       	breq	.+2      	; 0x1932 <vfprintf+0x300>
    1930:	b3 94       	inc	r11
    1932:	a3 fc       	sbrc	r10, 3
    1934:	11 c0       	rjmp	.+34     	; 0x1958 <vfprintf+0x326>
    1936:	a0 fe       	sbrs	r10, 0
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x314>
    193a:	b2 14       	cp	r11, r2
    193c:	88 f4       	brcc	.+34     	; 0x1960 <vfprintf+0x32e>
    193e:	28 0c       	add	r2, r8
    1940:	92 2c       	mov	r9, r2
    1942:	9b 18       	sub	r9, r11
    1944:	0e c0       	rjmp	.+28     	; 0x1962 <vfprintf+0x330>
    1946:	b2 14       	cp	r11, r2
    1948:	60 f4       	brcc	.+24     	; 0x1962 <vfprintf+0x330>
    194a:	b6 01       	movw	r22, r12
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    1954:	b3 94       	inc	r11
    1956:	f7 cf       	rjmp	.-18     	; 0x1946 <vfprintf+0x314>
    1958:	b2 14       	cp	r11, r2
    195a:	18 f4       	brcc	.+6      	; 0x1962 <vfprintf+0x330>
    195c:	2b 18       	sub	r2, r11
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfprintf+0x332>
    1960:	98 2c       	mov	r9, r8
    1962:	21 2c       	mov	r2, r1
    1964:	a4 fe       	sbrs	r10, 4
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <vfprintf+0x356>
    1968:	b6 01       	movw	r22, r12
    196a:	80 e3       	ldi	r24, 0x30	; 48
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    1972:	a2 fe       	sbrs	r10, 2
    1974:	17 c0       	rjmp	.+46     	; 0x19a4 <vfprintf+0x372>
    1976:	a1 fc       	sbrc	r10, 1
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <vfprintf+0x34e>
    197a:	88 e7       	ldi	r24, 0x78	; 120
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0x352>
    1980:	88 e5       	ldi	r24, 0x58	; 88
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	b6 01       	movw	r22, r12
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <vfprintf+0x36e>
    1988:	8a 2d       	mov	r24, r10
    198a:	86 78       	andi	r24, 0x86	; 134
    198c:	59 f0       	breq	.+22     	; 0x19a4 <vfprintf+0x372>
    198e:	a1 fe       	sbrs	r10, 1
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <vfprintf+0x364>
    1992:	8b e2       	ldi	r24, 0x2B	; 43
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vfprintf+0x366>
    1996:	80 e2       	ldi	r24, 0x20	; 32
    1998:	a7 fc       	sbrc	r10, 7
    199a:	8d e2       	ldi	r24, 0x2D	; 45
    199c:	b6 01       	movw	r22, r12
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    19a4:	89 14       	cp	r8, r9
    19a6:	38 f4       	brcc	.+14     	; 0x19b6 <vfprintf+0x384>
    19a8:	b6 01       	movw	r22, r12
    19aa:	80 e3       	ldi	r24, 0x30	; 48
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    19b2:	9a 94       	dec	r9
    19b4:	f7 cf       	rjmp	.-18     	; 0x19a4 <vfprintf+0x372>
    19b6:	8a 94       	dec	r8
    19b8:	f3 01       	movw	r30, r6
    19ba:	e8 0d       	add	r30, r8
    19bc:	f1 1d       	adc	r31, r1
    19be:	80 81       	ld	r24, Z
    19c0:	b6 01       	movw	r22, r12
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    19c8:	81 10       	cpse	r8, r1
    19ca:	f5 cf       	rjmp	.-22     	; 0x19b6 <vfprintf+0x384>
    19cc:	22 20       	and	r2, r2
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <vfprintf+0x3a0>
    19d0:	42 ce       	rjmp	.-892    	; 0x1656 <vfprintf+0x24>
    19d2:	b6 01       	movw	r22, r12
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    19dc:	2a 94       	dec	r2
    19de:	f6 cf       	rjmp	.-20     	; 0x19cc <vfprintf+0x39a>
    19e0:	f6 01       	movw	r30, r12
    19e2:	86 81       	ldd	r24, Z+6	; 0x06
    19e4:	97 81       	ldd	r25, Z+7	; 0x07
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x3ba>
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
    19ec:	2b 96       	adiw	r28, 0x0b	; 11
    19ee:	e2 e1       	ldi	r30, 0x12	; 18
    19f0:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__epilogue_restores__>

000019f4 <strnlen_P>:
    19f4:	fc 01       	movw	r30, r24
    19f6:	05 90       	lpm	r0, Z+
    19f8:	61 50       	subi	r22, 0x01	; 1
    19fa:	70 40       	sbci	r23, 0x00	; 0
    19fc:	01 10       	cpse	r0, r1
    19fe:	d8 f7       	brcc	.-10     	; 0x19f6 <strnlen_P+0x2>
    1a00:	80 95       	com	r24
    1a02:	90 95       	com	r25
    1a04:	8e 0f       	add	r24, r30
    1a06:	9f 1f       	adc	r25, r31
    1a08:	08 95       	ret

00001a0a <strnlen>:
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	61 50       	subi	r22, 0x01	; 1
    1a0e:	70 40       	sbci	r23, 0x00	; 0
    1a10:	01 90       	ld	r0, Z+
    1a12:	01 10       	cpse	r0, r1
    1a14:	d8 f7       	brcc	.-10     	; 0x1a0c <strnlen+0x2>
    1a16:	80 95       	com	r24
    1a18:	90 95       	com	r25
    1a1a:	8e 0f       	add	r24, r30
    1a1c:	9f 1f       	adc	r25, r31
    1a1e:	08 95       	ret

00001a20 <__ultoa_invert>:
    1a20:	fa 01       	movw	r30, r20
    1a22:	aa 27       	eor	r26, r26
    1a24:	28 30       	cpi	r18, 0x08	; 8
    1a26:	51 f1       	breq	.+84     	; 0x1a7c <__ultoa_invert+0x5c>
    1a28:	20 31       	cpi	r18, 0x10	; 16
    1a2a:	81 f1       	breq	.+96     	; 0x1a8c <__ultoa_invert+0x6c>
    1a2c:	e8 94       	clt
    1a2e:	6f 93       	push	r22
    1a30:	6e 7f       	andi	r22, 0xFE	; 254
    1a32:	6e 5f       	subi	r22, 0xFE	; 254
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	8f 4f       	sbci	r24, 0xFF	; 255
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	af 4f       	sbci	r26, 0xFF	; 255
    1a3c:	b1 e0       	ldi	r27, 0x01	; 1
    1a3e:	3e d0       	rcall	.+124    	; 0x1abc <__ultoa_invert+0x9c>
    1a40:	b4 e0       	ldi	r27, 0x04	; 4
    1a42:	3c d0       	rcall	.+120    	; 0x1abc <__ultoa_invert+0x9c>
    1a44:	67 0f       	add	r22, r23
    1a46:	78 1f       	adc	r23, r24
    1a48:	89 1f       	adc	r24, r25
    1a4a:	9a 1f       	adc	r25, r26
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	68 0f       	add	r22, r24
    1a50:	79 1f       	adc	r23, r25
    1a52:	8a 1f       	adc	r24, r26
    1a54:	91 1d       	adc	r25, r1
    1a56:	a1 1d       	adc	r26, r1
    1a58:	6a 0f       	add	r22, r26
    1a5a:	71 1d       	adc	r23, r1
    1a5c:	81 1d       	adc	r24, r1
    1a5e:	91 1d       	adc	r25, r1
    1a60:	a1 1d       	adc	r26, r1
    1a62:	20 d0       	rcall	.+64     	; 0x1aa4 <__ultoa_invert+0x84>
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <__ultoa_invert+0x48>
    1a66:	68 94       	set
    1a68:	3f 91       	pop	r19
    1a6a:	2a e0       	ldi	r18, 0x0A	; 10
    1a6c:	26 9f       	mul	r18, r22
    1a6e:	11 24       	eor	r1, r1
    1a70:	30 19       	sub	r19, r0
    1a72:	30 5d       	subi	r19, 0xD0	; 208
    1a74:	31 93       	st	Z+, r19
    1a76:	de f6       	brtc	.-74     	; 0x1a2e <__ultoa_invert+0xe>
    1a78:	cf 01       	movw	r24, r30
    1a7a:	08 95       	ret
    1a7c:	46 2f       	mov	r20, r22
    1a7e:	47 70       	andi	r20, 0x07	; 7
    1a80:	40 5d       	subi	r20, 0xD0	; 208
    1a82:	41 93       	st	Z+, r20
    1a84:	b3 e0       	ldi	r27, 0x03	; 3
    1a86:	0f d0       	rcall	.+30     	; 0x1aa6 <__ultoa_invert+0x86>
    1a88:	c9 f7       	brne	.-14     	; 0x1a7c <__ultoa_invert+0x5c>
    1a8a:	f6 cf       	rjmp	.-20     	; 0x1a78 <__ultoa_invert+0x58>
    1a8c:	46 2f       	mov	r20, r22
    1a8e:	4f 70       	andi	r20, 0x0F	; 15
    1a90:	40 5d       	subi	r20, 0xD0	; 208
    1a92:	4a 33       	cpi	r20, 0x3A	; 58
    1a94:	18 f0       	brcs	.+6      	; 0x1a9c <__ultoa_invert+0x7c>
    1a96:	49 5d       	subi	r20, 0xD9	; 217
    1a98:	31 fd       	sbrc	r19, 1
    1a9a:	40 52       	subi	r20, 0x20	; 32
    1a9c:	41 93       	st	Z+, r20
    1a9e:	02 d0       	rcall	.+4      	; 0x1aa4 <__ultoa_invert+0x84>
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <__ultoa_invert+0x6c>
    1aa2:	ea cf       	rjmp	.-44     	; 0x1a78 <__ultoa_invert+0x58>
    1aa4:	b4 e0       	ldi	r27, 0x04	; 4
    1aa6:	a6 95       	lsr	r26
    1aa8:	97 95       	ror	r25
    1aaa:	87 95       	ror	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	ba 95       	dec	r27
    1ab2:	c9 f7       	brne	.-14     	; 0x1aa6 <__ultoa_invert+0x86>
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	61 05       	cpc	r22, r1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	08 95       	ret
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	0a 2e       	mov	r0, r26
    1ac2:	06 94       	lsr	r0
    1ac4:	57 95       	ror	r21
    1ac6:	47 95       	ror	r20
    1ac8:	37 95       	ror	r19
    1aca:	27 95       	ror	r18
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0xa2>
    1ad0:	62 0f       	add	r22, r18
    1ad2:	73 1f       	adc	r23, r19
    1ad4:	84 1f       	adc	r24, r20
    1ad6:	95 1f       	adc	r25, r21
    1ad8:	a0 1d       	adc	r26, r0
    1ada:	08 95       	ret

00001adc <__muluhisi3>:
    1adc:	0e 94 a5 09 	call	0x134a	; 0x134a <__umulhisi3>
    1ae0:	a5 9f       	mul	r26, r21
    1ae2:	90 0d       	add	r25, r0
    1ae4:	b4 9f       	mul	r27, r20
    1ae6:	90 0d       	add	r25, r0
    1ae8:	a4 9f       	mul	r26, r20
    1aea:	80 0d       	add	r24, r0
    1aec:	91 1d       	adc	r25, r1
    1aee:	11 24       	eor	r1, r1
    1af0:	08 95       	ret

00001af2 <__mulshisi3>:
    1af2:	b7 ff       	sbrs	r27, 7
    1af4:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__muluhisi3>

00001af8 <__mulohisi3>:
    1af8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__muluhisi3>
    1afc:	82 1b       	sub	r24, r18
    1afe:	93 0b       	sbc	r25, r19
    1b00:	08 95       	ret

00001b02 <__prologue_saves__>:
    1b02:	2f 92       	push	r2
    1b04:	3f 92       	push	r3
    1b06:	4f 92       	push	r4
    1b08:	5f 92       	push	r5
    1b0a:	6f 92       	push	r6
    1b0c:	7f 92       	push	r7
    1b0e:	8f 92       	push	r8
    1b10:	9f 92       	push	r9
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	ca 1b       	sub	r28, r26
    1b2c:	db 0b       	sbc	r29, r27
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	09 94       	ijmp

00001b3a <__epilogue_restores__>:
    1b3a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b3c:	39 88       	ldd	r3, Y+17	; 0x11
    1b3e:	48 88       	ldd	r4, Y+16	; 0x10
    1b40:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b42:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b44:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b46:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b48:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b4c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b50:	df 80       	ldd	r13, Y+7	; 0x07
    1b52:	ee 80       	ldd	r14, Y+6	; 0x06
    1b54:	fd 80       	ldd	r15, Y+5	; 0x05
    1b56:	0c 81       	ldd	r16, Y+4	; 0x04
    1b58:	1b 81       	ldd	r17, Y+3	; 0x03
    1b5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b5c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b5e:	ce 0f       	add	r28, r30
    1b60:	d1 1d       	adc	r29, r1
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	ed 01       	movw	r28, r26
    1b6e:	08 95       	ret

00001b70 <_exit>:
    1b70:	f8 94       	cli

00001b72 <__stop_program>:
    1b72:	ff cf       	rjmp	.-2      	; 0x1b72 <__stop_program>
