
CSSE2010_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000017fe  00001892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  0080019e  0080019e  00001930  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002af7  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013af  00000000  00000000  000047c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018ce  00000000  00000000  00005b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  00007440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c86  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001726  00000000  00000000  00008872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00009f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__ctors_end>
       4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
       c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      10:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      14:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_5>
      18:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      1c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      20:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      2c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      38:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      3c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_16>
      44:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      48:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      4c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      50:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_20>
      54:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_21>
      58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      5c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      60:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      64:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      68:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      6c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      70:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      74:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
      78:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	27 72       	andi	r18, 0x27	; 39
      84:	27 2f       	mov	r18, r23
      86:	27 52       	subi	r18, 0x27	; 39
      88:	27 20       	and	r2, r7
      8a:	74 6f       	ori	r23, 0xF4	; 244
      8c:	20 72       	andi	r18, 0x20	; 32
      8e:	65 73       	andi	r22, 0x35	; 53
      90:	74 61       	ori	r23, 0x14	; 20
      92:	72 74       	andi	r23, 0x42	; 66
      94:	2c 20       	and	r2, r12
      96:	6f 72       	andi	r22, 0x2F	; 47
      98:	20 27       	eor	r18, r16
      9a:	65 27       	eor	r22, r21
      9c:	2f 27       	eor	r18, r31
      9e:	45 27       	eor	r20, r21
      a0:	20 74       	andi	r18, 0x40	; 64
      a2:	6f 20       	and	r6, r15
      a4:	65 78       	andi	r22, 0x85	; 133
      a6:	69 74       	andi	r22, 0x49	; 73
	...

000000a9 <__c.2598>:
      a9:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b3 <__c.2589>:
      b3:	54 68 65 20 70 6c 61 79 65 72 20 68 69 74 20 61     The player hit a
      c3:	20 77 61 6c 6c 21 00                                 wall!.

000000ca <__c.2575>:
      ca:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
      da:	6f 6a 65 63 74 20 62 79 20 53 69 74 68 69 6b 61     oject by Sithika
      ea:	20 4d 61 6e 6e 61 6b 6b 61 72 61 20 2d 20 34 38      Mannakkara - 48
      fa:	30 31 36 37 32 32 00                                016722.

00000101 <title_data>:
     101:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     111:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     121:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000129 <anim_data>:
     129:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     139:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     151:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     161:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     179:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     189:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     1a1:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1b1:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1c9:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     1d9:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     1f1:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     201:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     219:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     229:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     249:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     259:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     269:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     279:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     289:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     299:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

000002b9 <__c.2187>:
     2b9:	1b 5b 3f 32 35 6c 00                                .[?25l.

000002c0 <__c.2182>:
     2c0:	1b 5b 25 64 6d 00                                   .[%dm.

000002c6 <__c.2172>:
     2c6:	1b 5b 32 4a 00                                      .[2J.

000002cb <__c.2162>:
     2cb:	1b 5b 30 6d 00                                      .[0m.

000002d0 <__c.2157>:
     2d0:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d8 e0       	ldi	r29, 0x08	; 8
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61

000002e6 <__do_copy_data>:
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	ee ef       	ldi	r30, 0xFE	; 254
     2ee:	f7 e1       	ldi	r31, 0x17	; 23
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__do_copy_data+0x10>
     2f2:	05 90       	lpm	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	ae 39       	cpi	r26, 0x9E	; 158
     2f8:	b1 07       	cpc	r27, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__do_copy_data+0xc>

000002fc <__do_clear_bss>:
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	ae e9       	ldi	r26, 0x9E	; 158
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	a2 35       	cpi	r26, 0x52	; 82
     308:	b2 07       	cpc	r27, r18
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>
     30c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <main>
     310:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <_exit>

00000314 <__bad_interrupt>:
     314:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000318 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     318:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
	last_button_state = 0;
     31c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     320:	e8 e6       	ldi	r30, 0x68	; 104
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	82 60       	ori	r24, 0x02	; 2
     328:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     32a:	8b b3       	in	r24, 0x1b	; 27
     32c:	82 60       	ori	r24, 0x02	; 2
     32e:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     330:	ec e6       	ldi	r30, 0x6C	; 108
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8f 60       	ori	r24, 0x0F	; 15
     338:	80 83       	st	Z, r24
     33a:	08 95       	ret

0000033c <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     33c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     340:	88 23       	and	r24, r24
     342:	f9 f0       	breq	.+62     	; 0x382 <button_pushed+0x46>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     344:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     348:	5f b7       	in	r21, 0x3f	; 63
     34a:	50 78       	andi	r21, 0x80	; 128
		cli();
     34c:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0b c0       	rjmp	.+22     	; 0x368 <button_pushed+0x2c>
		{
			button_queue[i - 1] = button_queue[i];
     352:	29 2f       	mov	r18, r25
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	e1 56       	subi	r30, 0x61	; 97
     35a:	fe 4f       	sbci	r31, 0xFE	; 254
     35c:	40 81       	ld	r20, Z
     35e:	f9 01       	movw	r30, r18
     360:	e2 56       	subi	r30, 0x62	; 98
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     366:	9f 5f       	subi	r25, 0xFF	; 255
     368:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end>
     36c:	92 17       	cp	r25, r18
     36e:	88 f3       	brcs	.-30     	; 0x352 <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     370:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__data_end>
     374:	91 50       	subi	r25, 0x01	; 1
     376:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <__data_end>

		if (interrupts_were_enabled)
     37a:	55 23       	and	r21, r21
     37c:	19 f0       	breq	.+6      	; 0x384 <button_pushed+0x48>
		{
			// Turn them back on again.
			sei();
     37e:	78 94       	sei
     380:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     382:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     384:	08 95       	ret

00000386 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     386:	8f b7       	in	r24, 0x3f	; 63
	cli();
     388:	f8 94       	cli
	queue_length = 0;
     38a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
	last_button_state = 0;
     38e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <last_button_state>
	if (interrupts_were_enabled)
     392:	88 23       	and	r24, r24
     394:	0c f4       	brge	.+2      	; 0x398 <clear_button_presses+0x12>
	{
		// Turn them back on again.
		sei();
     396:	78 94       	sei
     398:	08 95       	ret

0000039a <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	8f 93       	push	r24
     3ac:	9f 93       	push	r25
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     3b2:	43 b1       	in	r20, 0x03	; 3
     3b4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	24 c0       	rjmp	.+72     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     3ba:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__data_end>
     3be:	94 30       	cpi	r25, 0x04	; 4
     3c0:	f8 f4       	brcc	.+62     	; 0x400 <__EEPROM_REGION_LENGTH__>
				&& (button_state & (1 << pin))
     3c2:	24 2f       	mov	r18, r20
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	08 2e       	mov	r0, r24
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <__vector_5+0x34>
     3ca:	35 95       	asr	r19
     3cc:	27 95       	ror	r18
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <__vector_5+0x30>
     3d2:	20 ff       	sbrs	r18, 0
     3d4:	15 c0       	rjmp	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
				&& !(last_button_state & (1 << pin)))
     3d6:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <last_button_state>
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	08 2e       	mov	r0, r24
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__vector_5+0x4a>
     3e0:	35 95       	asr	r19
     3e2:	27 95       	ror	r18
     3e4:	0a 94       	dec	r0
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <__vector_5+0x46>
     3e8:	20 fd       	sbrc	r18, 0
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     3ec:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__data_end>
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	9e 0f       	add	r25, r30
     3f4:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <__data_end>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e1 56       	subi	r30, 0x61	; 97
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	84 30       	cpi	r24, 0x04	; 4
     404:	d0 f2       	brcs	.-76     	; 0x3ba <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     406:	40 93 a3 01 	sts	0x01A3, r20	; 0x8001a3 <last_button_state>
}
     40a:	ff 91       	pop	r31
     40c:	ef 91       	pop	r30
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{
	switch (board[row][col] & OBJECT_MASK)
     422:	90 e1       	ldi	r25, 0x10	; 16
     424:	89 9f       	mul	r24, r25
     426:	f0 01       	movw	r30, r0
     428:	11 24       	eor	r1, r1
     42a:	e9 55       	subi	r30, 0x59	; 89
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	e6 0f       	add	r30, r22
     430:	f1 1d       	adc	r31, r1
     432:	90 81       	ld	r25, Z
     434:	97 70       	andi	r25, 0x07	; 7
     436:	92 30       	cpi	r25, 0x02	; 2
     438:	99 f0       	breq	.+38     	; 0x460 <paint_square+0x3e>
     43a:	28 f4       	brcc	.+10     	; 0x446 <paint_square+0x24>
     43c:	99 23       	and	r25, r25
     43e:	41 f0       	breq	.+16     	; 0x450 <paint_square+0x2e>
     440:	91 30       	cpi	r25, 0x01	; 1
     442:	51 f0       	breq	.+20     	; 0x458 <paint_square+0x36>
     444:	08 95       	ret
     446:	94 30       	cpi	r25, 0x04	; 4
     448:	79 f0       	breq	.+30     	; 0x468 <paint_square+0x46>
     44a:	96 30       	cpi	r25, 0x06	; 6
     44c:	89 f0       	breq	.+34     	; 0x470 <paint_square+0x4e>
     44e:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
			break;
     456:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     458:	4f ef       	ldi	r20, 0xFF	; 255
     45a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
			break;
     45e:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     460:	4c e3       	ldi	r20, 0x3C	; 60
     462:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
			break;
     466:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     468:	4f e0       	ldi	r20, 0x0F	; 15
     46a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
			break;
     46e:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     470:	40 ef       	ldi	r20, 0xF0	; 240
     472:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
     476:	08 95       	ret

00000478 <initialise_game>:
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(void)
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
	#undef W
	#undef T
	#undef B

	// Set the initial player location (for level 1).
	player_row = 5;
     47c:	85 e0       	ldi	r24, 0x05	; 5
     47e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <player_row>
	player_col = 2;
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <player_col>

	// Make the player icon initially invisible.
	player_visible = false;
     488:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <player_visible>

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	27 c0       	rjmp	.+78     	; 0x4de <initialise_game+0x66>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     490:	8a 2f       	mov	r24, r26
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	27 e0       	ldi	r18, 0x07	; 7
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	28 1b       	sub	r18, r24
     49a:	39 0b       	sbc	r19, r25
				lv1_layout[row][col];
     49c:	46 2f       	mov	r20, r22
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	fc 01       	movw	r30, r24
     4a2:	e2 95       	swap	r30
     4a4:	f2 95       	swap	r31
     4a6:	f0 7f       	andi	r31, 0xF0	; 240
     4a8:	fe 27       	eor	r31, r30
     4aa:	e0 7f       	andi	r30, 0xF0	; 240
     4ac:	fe 27       	eor	r31, r30
     4ae:	e1 5f       	subi	r30, 0xF1	; 241
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	e4 0f       	add	r30, r20
     4b4:	f5 1f       	adc	r31, r21
     4b6:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     4b8:	c9 01       	movw	r24, r18
     4ba:	82 95       	swap	r24
     4bc:	92 95       	swap	r25
     4be:	90 7f       	andi	r25, 0xF0	; 240
     4c0:	98 27       	eor	r25, r24
     4c2:	80 7f       	andi	r24, 0xF0	; 240
     4c4:	98 27       	eor	r25, r24
     4c6:	89 55       	subi	r24, 0x59	; 89
     4c8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ca:	fc 01       	movw	r30, r24
     4cc:	e4 0f       	add	r30, r20
     4ce:	f5 1f       	adc	r31, r21
     4d0:	70 83       	st	Z, r23

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <initialise_game+0x60>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	60 31       	cpi	r22, 0x10	; 16
     4da:	d0 f2       	brcs	.-76     	; 0x490 <initialise_game+0x18>
	// Make the player icon initially invisible.
	player_visible = false;

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     4dc:	af 5f       	subi	r26, 0xFF	; 255
     4de:	a8 30       	cpi	r26, 0x08	; 8
     4e0:	d0 f3       	brcs	.-12     	; 0x4d6 <initialise_game+0x5e>
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <initialise_game+0x82>
	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     4e6:	6c 2f       	mov	r22, r28
     4e8:	8d 2f       	mov	r24, r29
     4ea:	0e 94 11 02 	call	0x422	; 0x422 <paint_square>
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     4ee:	cf 5f       	subi	r28, 0xFF	; 255
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <initialise_game+0x7c>
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	c0 31       	cpi	r28, 0x10	; 16
     4f6:	b8 f3       	brcs	.-18     	; 0x4e6 <initialise_game+0x6e>
				lv1_layout[row][col];
		}
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     4f8:	df 5f       	subi	r29, 0xFF	; 255
     4fa:	d8 30       	cpi	r29, 0x08	; 8
     4fc:	d0 f3       	brcs	.-12     	; 0x4f2 <initialise_game+0x7a>
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
		}
	}
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     504:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <player_visible>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	89 27       	eor	r24, r25
     50c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <player_visible>
	if (player_visible)
     510:	88 23       	and	r24, r24
     512:	41 f0       	breq	.+16     	; 0x524 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     514:	40 e1       	ldi	r20, 0x10	; 16
     516:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <player_col>
     51a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <player_row>
     51e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ledmatrix_update_pixel>
     522:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     524:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <player_col>
     528:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <player_row>
     52c:	0e 94 11 02 	call	0x422	; 0x422 <paint_square>
     530:	08 95       	ret

00000532 <move_player>:
	}
}

// This function handles player movements.
bool move_player(int8_t delta_row, int8_t delta_col)
{
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	08 2f       	mov	r16, r24
     53c:	16 2f       	mov	r17, r22
	// |    indicating an invalid move.                                  |
	// | 3. Otherwise push the box and move the player, then clear the   |
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+
	uint8_t old_row = player_row;
     53e:	d0 91 a6 01 	lds	r29, 0x01A6	; 0x8001a6 <player_row>
	uint8_t old_col = player_col;
     542:	c0 91 a5 01 	lds	r28, 0x01A5	; 0x8001a5 <player_col>
	paint_square(player_row, player_col);
     546:	6c 2f       	mov	r22, r28
     548:	8d 2f       	mov	r24, r29
     54a:	0e 94 11 02 	call	0x422	; 0x422 <paint_square>
	player_row += delta_row;
     54e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <player_row>
     552:	80 0f       	add	r24, r16
     554:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <player_row>
	if (player_row > 200) {
     558:	89 3c       	cpi	r24, 0xC9	; 201
     55a:	18 f0       	brcs	.+6      	; 0x562 <move_player+0x30>
		player_row = 7;
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <player_row>
	}
	if (player_row > 7) {
     562:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <player_row>
     566:	88 30       	cpi	r24, 0x08	; 8
     568:	10 f0       	brcs	.+4      	; 0x56e <move_player+0x3c>
		player_row = 0;
     56a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <player_row>
	}
	
	player_col += delta_col;
     56e:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <player_col>
     572:	61 0f       	add	r22, r17
     574:	60 93 a5 01 	sts	0x01A5, r22	; 0x8001a5 <player_col>
	if (player_col > 200) {
     578:	69 3c       	cpi	r22, 0xC9	; 201
     57a:	18 f0       	brcs	.+6      	; 0x582 <move_player+0x50>
		player_col = 15;
     57c:	8f e0       	ldi	r24, 0x0F	; 15
     57e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <player_col>
	}
	if (player_col > 15) {
     582:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <player_col>
     586:	80 31       	cpi	r24, 0x10	; 16
     588:	10 f0       	brcs	.+4      	; 0x58e <move_player+0x5c>
		player_col = 0;
     58a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <player_col>
	}
	
	if (board[player_row][player_col] == WALL) {
     58e:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <player_row>
     592:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <player_col>
     596:	90 e1       	ldi	r25, 0x10	; 16
     598:	e9 9f       	mul	r30, r25
     59a:	f0 01       	movw	r30, r0
     59c:	11 24       	eor	r1, r1
     59e:	e9 55       	subi	r30, 0x59	; 89
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	e8 0f       	add	r30, r24
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	31 f4       	brne	.+12     	; 0x5b8 <move_player+0x86>
		player_row = old_row;
     5ac:	d0 93 a6 01 	sts	0x01A6, r29	; 0x8001a6 <player_row>
		player_col = old_col;
     5b0:	c0 93 a5 01 	sts	0x01A5, r28	; 0x8001a5 <player_col>
		return false;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <move_player+0x8c>
	} else {
		flash_player();
     5b8:	0e 94 82 02 	call	0x504	; 0x504 <flash_player>
		return true;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <is_game_over>:
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	// <YOUR CODE HERE>.
	return false;
}
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret

000005cc <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     5cc:	80 e8       	ldi	r24, 0x80	; 128
     5ce:	0e 94 c9 05 	call	0xb92	; 0xb92 <spi_setup_master>
     5d2:	08 95       	ret

000005d4 <ledmatrix_update_pixel>:
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	60 31       	cpi	r22, 0x10	; 16
     5dc:	b0 f4       	brcc	.+44     	; 0x60a <ledmatrix_update_pixel+0x36>
     5de:	88 30       	cpi	r24, 0x08	; 8
     5e0:	a0 f4       	brcc	.+40     	; 0x60a <ledmatrix_update_pixel+0x36>
     5e2:	14 2f       	mov	r17, r20
     5e4:	d6 2f       	mov	r29, r22
     5e6:	c8 2f       	mov	r28, r24
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     5ee:	8c 2f       	mov	r24, r28
     5f0:	87 70       	andi	r24, 0x07	; 7
     5f2:	20 e1       	ldi	r18, 0x10	; 16
     5f4:	82 9f       	mul	r24, r18
     5f6:	c0 01       	movw	r24, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	6d 2f       	mov	r22, r29
     5fc:	6f 70       	andi	r22, 0x0F	; 15
     5fe:	86 2b       	or	r24, r22
     600:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     604:	81 2f       	mov	r24, r17
     606:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	08 95       	ret

00000612 <ledmatrix_update_column>:
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	80 31       	cpi	r24, 0x10	; 16
     61a:	a0 f4       	brcc	.+40     	; 0x644 <ledmatrix_update_column+0x32>
     61c:	8b 01       	movw	r16, r22
     61e:	c8 2f       	mov	r28, r24
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     626:	8c 2f       	mov	r24, r28
     628:	8f 70       	andi	r24, 0x0F	; 15
     62a:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     62e:	c0 e0       	ldi	r28, 0x00	; 0
     630:	07 c0       	rjmp	.+14     	; 0x640 <ledmatrix_update_column+0x2e>
     632:	f8 01       	movw	r30, r16
     634:	ec 0f       	add	r30, r28
     636:	f1 1d       	adc	r31, r1
     638:	80 81       	ld	r24, Z
     63a:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     63e:	cf 5f       	subi	r28, 0xFF	; 255
     640:	c8 30       	cpi	r28, 0x08	; 8
     642:	b8 f3       	brcs	.-18     	; 0x632 <ledmatrix_update_column+0x20>
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <ledmatrix_shift_display_left>:
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     658:	08 95       	ret

0000065a <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     65a:	8f e0       	ldi	r24, 0x0F	; 15
     65c:	0e 94 f5 05 	call	0xbea	; 0xbea <spi_send_byte>
     660:	08 95       	ret

00000662 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	init_ledmatrix();
     662:	0e 94 e6 02 	call	0x5cc	; 0x5cc <init_ledmatrix>
	init_buttons();
     666:	0e 94 8c 01 	call	0x318	; 0x318 <init_buttons>
	init_serial_stdio(19200, false);
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	7b e4       	ldi	r23, 0x4B	; 75
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 76 05 	call	0xaec	; 0xaec <init_serial_stdio>
	init_timer0();
     678:	0e 94 fb 07 	call	0xff6	; 0xff6 <init_timer0>
	init_timer1();
     67c:	0e 94 46 08 	call	0x108c	; 0x108c <init_timer1>
	init_timer2();
     680:	0e 94 4b 08 	call	0x1096	; 0x1096 <init_timer2>

	// Turn on global interrupts.
	sei();
     684:	78 94       	sei
     686:	08 95       	ret

00000688 <start_screen>:
}

void start_screen(void)
{
	// Hide terminal cursor and set display mode to default.
	hide_cursor();
     688:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <hide_cursor>
	normal_display_mode();
     68c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <normal_display_mode>

	// Clear terminal screen and output the title ASCII art.
	clear_terminal();
     690:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <clear_terminal>
	display_terminal_title(3, 5);
     694:	65 e0       	ldi	r22, 0x05	; 5
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	0e 94 99 07 	call	0xf32	; 0xf32 <display_terminal_title>
	move_terminal_cursor(11, 5);
     69c:	65 e0       	ldi	r22, 0x05	; 5
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	8b e0       	ldi	r24, 0x0B	; 11
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <move_terminal_cursor>
	// Change this to your name and student number. Remember to remove the
	// chevrons - "<" and ">"!
	printf_P(PSTR("CSSE2010/7201 Project by Sithika Mannakkara - 48016722"));
     6a8:	8a ec       	ldi	r24, 0xCA	; 202
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>

	// Setup the start screen on the LED matrix.
	setup_start_screen();
     6b4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setup_start_screen>

	// Clear button presses registered as the result of powering on the
	// I/O board. This is just to work around a minor limitation of the
	// hardware, and is only done here to ensure that the start screen is
	// not skipped when you power cycle the I/O board.
	clear_button_presses();
     6b8:	0e 94 c3 01 	call	0x386	; 0x386 <clear_button_presses>
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
	// Wait until a button is pushed, or 's'/'S' is entered.
	while (1)
	{
		// Check for button presses. If any button is pressed, exit
		// the start screen by breaking out of this infinite loop.
		if (button_pushed() != NO_BUTTON_PUSHED)
     6c0:	0e 94 9e 01 	call	0x33c	; 0x33c <button_pushed>
     6c4:	8f 3f       	cpi	r24, 0xFF	; 255
     6c6:	99 f4       	brne	.+38     	; 0x6ee <start_screen+0x66>
		{
			break;
		}

		// No button was pressed, check if we have terminal inputs.
		if (serial_input_available())
     6c8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <serial_input_available>
     6cc:	88 23       	and	r24, r24
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <start_screen+0x60>
		{
			// Terminal input is available, get the character.
			int serial_input = fgetc(stdin);
     6d0:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__iob>
     6d4:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__iob+0x1>
     6d8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fgetc>

			// If the input is 's'/'S', exit the start screen by
			// breaking out of this loop.
			if (serial_input == 's' || serial_input == 'S')
     6dc:	83 37       	cpi	r24, 0x73	; 115
     6de:	91 05       	cpc	r25, r1
     6e0:	31 f0       	breq	.+12     	; 0x6ee <start_screen+0x66>
     6e2:	83 35       	cpi	r24, 0x53	; 83
     6e4:	91 05       	cpc	r25, r1
     6e6:	19 f0       	breq	.+6      	; 0x6ee <start_screen+0x66>
		}

		// No button presses and no 's'/'S' typed into the terminal,
		// we will loop back and do the checks again. We also update
		// the start screen animation on the LED matrix here.
		update_start_screen();
     6e8:	0e 94 ee 06 	call	0xddc	; 0xddc <update_start_screen>
	}
     6ec:	e9 cf       	rjmp	.-46     	; 0x6c0 <start_screen+0x38>
     6ee:	08 95       	ret

000006f0 <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal.
	hide_cursor();
     6f0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <hide_cursor>
	clear_terminal();
     6f4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <clear_terminal>

	// Initialise the game and display.
	initialise_game();
     6f8:	0e 94 3c 02 	call	0x478	; 0x478 <initialise_game>

	// Clear all button presses and serial inputs, so that potentially
	// buffered inputs aren't going to make it to the new game.
	clear_button_presses();
     6fc:	0e 94 c3 01 	call	0x386	; 0x386 <clear_button_presses>
	clear_serial_input_buffer();
     700:	0e 94 c4 05 	call	0xb88	; 0xb88 <clear_serial_input_buffer>
     704:	08 95       	ret

00000706 <play_game>:
}

void play_game(void)
{
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
	uint32_t last_flash_time = get_current_time();
     71a:	0e 94 11 08 	call	0x1022	; 0x1022 <get_current_time>
     71e:	4b 01       	movw	r8, r22
     720:	5c 01       	movw	r10, r24

	// We play the game until it's over.
	while (!is_game_over())
     722:	88 c0       	rjmp	.+272    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     724:	0e 94 9e 01 	call	0x33c	; 0x33c <button_pushed>
     728:	c8 2f       	mov	r28, r24
		
		// Move the player, see move_player(...) in game.c.
		// Also remember to reset the flash cycle here.
		if (btn == BUTTON0_PUSHED) valid_move = move_player(0, 1);
     72a:	81 11       	cpse	r24, r1
     72c:	06 c0       	rjmp	.+12     	; 0x73a <play_game+0x34>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     736:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (btn == BUTTON1_PUSHED) valid_move = move_player(-1, 0);
     73a:	c1 30       	cpi	r28, 0x01	; 1
     73c:	31 f4       	brne	.+12     	; 0x74a <play_game+0x44>
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     746:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (btn == BUTTON2_PUSHED) valid_move = move_player(1, 0);
     74a:	c2 30       	cpi	r28, 0x02	; 2
     74c:	31 f4       	brne	.+12     	; 0x75a <play_game+0x54>
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     756:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (btn == BUTTON3_PUSHED) valid_move = move_player(0, -1);
     75a:	c3 30       	cpi	r28, 0x03	; 3
     75c:	31 f4       	brne	.+12     	; 0x76a <play_game+0x64>
     75e:	6f ef       	ldi	r22, 0xFF	; 255
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     766:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// Now, repeat for the other buttons, and combine with serial
		// inputs.
		if (serial_input_available()) {
     76a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <serial_input_available>
     76e:	88 23       	and	r24, r24
     770:	b9 f1       	breq	.+110    	; 0x7e0 <play_game+0xda>
			int serial_input = fgetc(stdin);
     772:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__iob>
     776:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__iob+0x1>
     77a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fgetc>
     77e:	ec 01       	movw	r28, r24
			if (serial_input == 'd' || serial_input == 'D') valid_move = move_player(0, 1);
     780:	84 36       	cpi	r24, 0x64	; 100
     782:	91 05       	cpc	r25, r1
     784:	19 f0       	breq	.+6      	; 0x78c <play_game+0x86>
     786:	84 34       	cpi	r24, 0x44	; 68
     788:	91 05       	cpc	r25, r1
     78a:	31 f4       	brne	.+12     	; 0x798 <play_game+0x92>
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     794:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (serial_input == 's' || serial_input == 'S') valid_move = move_player(-1, 0);
     798:	c3 37       	cpi	r28, 0x73	; 115
     79a:	d1 05       	cpc	r29, r1
     79c:	19 f0       	breq	.+6      	; 0x7a4 <play_game+0x9e>
     79e:	c3 35       	cpi	r28, 0x53	; 83
     7a0:	d1 05       	cpc	r29, r1
     7a2:	31 f4       	brne	.+12     	; 0x7b0 <play_game+0xaa>
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     7ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (serial_input == 'w' || serial_input == 'W') valid_move = move_player(1, 0);
     7b0:	c7 37       	cpi	r28, 0x77	; 119
     7b2:	d1 05       	cpc	r29, r1
     7b4:	19 f0       	breq	.+6      	; 0x7bc <play_game+0xb6>
     7b6:	c7 35       	cpi	r28, 0x57	; 87
     7b8:	d1 05       	cpc	r29, r1
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <play_game+0xc2>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     7c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (serial_input == 'a' || serial_input == 'A') valid_move = move_player(0, -1);
     7c8:	c1 36       	cpi	r28, 0x61	; 97
     7ca:	d1 05       	cpc	r29, r1
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <play_game+0xce>
     7ce:	c1 34       	cpi	r28, 0x41	; 65
     7d0:	d1 05       	cpc	r29, r1
     7d2:	31 f4       	brne	.+12     	; 0x7e0 <play_game+0xda>
     7d4:	6f ef       	ldi	r22, 0xFF	; 255
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 99 02 	call	0x532	; 0x532 <move_player>
     7dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if (!valid_move) {
     7e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7e4:	81 11       	cpse	r24, r1
     7e6:	13 c0       	rjmp	.+38     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			clear_terminal();
     7e8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <clear_terminal>
			move_terminal_cursor(11, 5);
     7ec:	65 e0       	ldi	r22, 0x05	; 5
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	8b e0       	ldi	r24, 0x0B	; 11
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <move_terminal_cursor>
			printf_P(PSTR("The player hit a wall!"));
     7f8:	83 eb       	ldi	r24, 0xB3	; 179
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
			valid_move = true;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
		}

		uint32_t current_time = get_current_time();
     80e:	0e 94 11 08 	call	0x1022	; 0x1022 <get_current_time>
     812:	6b 01       	movw	r12, r22
     814:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
     816:	d5 01       	movw	r26, r10
     818:	c4 01       	movw	r24, r8
     81a:	88 53       	subi	r24, 0x38	; 56
     81c:	9f 4f       	sbci	r25, 0xFF	; 255
     81e:	af 4f       	sbci	r26, 0xFF	; 255
     820:	bf 4f       	sbci	r27, 0xFF	; 255
     822:	c8 16       	cp	r12, r24
     824:	d9 06       	cpc	r13, r25
     826:	ea 06       	cpc	r14, r26
     828:	fb 06       	cpc	r15, r27
     82a:	20 f0       	brcs	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
     82c:	0e 94 82 02 	call	0x504	; 0x504 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
     830:	46 01       	movw	r8, r12
     832:	57 01       	movw	r10, r14
void play_game(void)
{
	uint32_t last_flash_time = get_current_time();

	// We play the game until it's over.
	while (!is_game_over())
     834:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <is_game_over>
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     83c:	73 cf       	rjmp	.-282    	; 0x724 <play_game+0x1e>
			// Update the most recent icon flash time.
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	08 95       	ret

00000854 <handle_game_over>:

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     854:	6a e0       	ldi	r22, 0x0A	; 10
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	8e e0       	ldi	r24, 0x0E	; 14
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     860:	89 ea       	ldi	r24, 0xA9	; 169
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
	move_terminal_cursor(15, 10);
     86c:	6a e0       	ldi	r22, 0x0A	; 10
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	8f e0       	ldi	r24, 0x0F	; 15
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 bf 07 	call	0xf7e	; 0xf7e <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, or 'e'/'E' to exit"));
     878:	8c e7       	ldi	r24, 0x7C	; 124
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     88c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <serial_input_available>
     890:	88 23       	and	r24, r24
     892:	e1 f3       	breq	.-8      	; 0x88c <handle_game_over+0x38>
		{
			serial_input = fgetc(stdin);
     894:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__iob>
     898:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__iob+0x1>
     89c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <fgetc>
		{
			// <YOUR CODE HERE>
		}
		// Now check for other possible inputs.
		
	}
     8a0:	f5 cf       	rjmp	.-22     	; 0x88c <handle_game_over+0x38>

000008a2 <main>:
bool valid_move = true;
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
     8a2:	0e 94 31 03 	call	0x662	; 0x662 <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
     8a6:	0e 94 44 03 	call	0x688	; 0x688 <start_screen>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game();
     8aa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <new_game>
		play_game();
     8ae:	0e 94 83 03 	call	0x706	; 0x706 <play_game>
		handle_game_over();
     8b2:	0e 94 2a 04 	call	0x854	; 0x854 <handle_game_over>

000008b6 <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
     8b6:	cf 93       	push	r28
     8b8:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
     8ba:	8a 30       	cpi	r24, 0x0A	; 10
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     8be:	8d e0       	ldi	r24, 0x0D	; 13
     8c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
     8c4:	9f b7       	in	r25, 0x3f	; 63
     8c6:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     8ca:	99 23       	and	r25, r25
     8cc:	29 f1       	breq	.+74     	; 0x918 <__stack+0x19>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     8ce:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	d1 f3       	breq	.-12     	; 0x8ca <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
     8d6:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     8d8:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <out_insert_pos>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	8e 0f       	add	r24, r30
     8e0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <out_insert_pos>
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	e6 5c       	subi	r30, 0xC6	; 198
     8e8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ea:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     8ec:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     8f6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <out_insert_pos>
     8fa:	8f 3f       	cpi	r24, 0xFF	; 255
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
     8fe:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
     902:	e1 ec       	ldi	r30, 0xC1	; 193
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	80 62       	ori	r24, 0x20	; 32
     90a:	80 83       	st	Z, r24
	if (interrupts_enabled)
     90c:	99 23       	and	r25, r25
     90e:	39 f0       	breq	.+14     	; 0x91e <__stack+0x1f>
	{
		sei();
     910:	78 94       	sei
	}
	return 0;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0x23>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
}
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
     926:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <bytes_in_input_buffer>
     92a:	88 23       	and	r24, r24
     92c:	e1 f3       	breq	.-8      	; 0x926 <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     92e:	2f b7       	in	r18, 0x3f	; 63
     930:	20 78       	andi	r18, 0x80	; 128
	cli();
     932:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     934:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <input_insert_pos>
     938:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <bytes_in_input_buffer>
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	83 1b       	sub	r24, r19
     940:	91 09       	sbc	r25, r1
     942:	5a f4       	brpl	.+22     	; 0x95a <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
     944:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <input_insert_pos>
     948:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <bytes_in_input_buffer>
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e8 1b       	sub	r30, r24
     950:	f1 09       	sbc	r31, r1
     952:	e6 5b       	subi	r30, 0xB6	; 182
     954:	fc 4f       	sbci	r31, 0xFC	; 252
     956:	80 81       	ld	r24, Z
     958:	0a c0       	rjmp	.+20     	; 0x96e <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     95a:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <input_insert_pos>
     95e:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <bytes_in_input_buffer>
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e8 1b       	sub	r30, r24
     966:	f1 09       	sbc	r31, r1
     968:	e6 5c       	subi	r30, 0xC6	; 198
     96a:	fc 4f       	sbci	r31, 0xFC	; 252
     96c:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
     96e:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <bytes_in_input_buffer>
     972:	91 50       	subi	r25, 0x01	; 1
     974:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <bytes_in_input_buffer>
	if (interrupts_enabled)
     978:	22 23       	and	r18, r18
     97a:	09 f0       	breq	.+2      	; 0x97e <uart_get_char+0x58>
	{
		sei();
     97c:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
     97e:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <first.1835>
     982:	9b 31       	cpi	r25, 0x1B	; 27
     984:	b1 f4       	brne	.+44     	; 0x9b2 <uart_get_char+0x8c>
     986:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <second.1836>
     98a:	9b 35       	cpi	r25, 0x5B	; 91
     98c:	91 f4       	brne	.+36     	; 0x9b2 <uart_get_char+0x8c>
	{
		switch (c)
     98e:	82 34       	cpi	r24, 0x42	; 66
     990:	49 f0       	breq	.+18     	; 0x9a4 <uart_get_char+0x7e>
     992:	18 f4       	brcc	.+6      	; 0x99a <uart_get_char+0x74>
     994:	81 34       	cpi	r24, 0x41	; 65
     996:	61 f0       	breq	.+24     	; 0x9b0 <uart_get_char+0x8a>
     998:	0c c0       	rjmp	.+24     	; 0x9b2 <uart_get_char+0x8c>
     99a:	83 34       	cpi	r24, 0x43	; 67
     99c:	29 f0       	breq	.+10     	; 0x9a8 <uart_get_char+0x82>
     99e:	84 34       	cpi	r24, 0x44	; 68
     9a0:	29 f0       	breq	.+10     	; 0x9ac <uart_get_char+0x86>
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
     9a4:	83 e7       	ldi	r24, 0x73	; 115
				break;
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <uart_get_char+0x8c>
			case 'C':
				c = 'd';
     9a8:	84 e6       	ldi	r24, 0x64	; 100
				break;
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <uart_get_char+0x8c>
			case 'D':
				c = 'a';
     9ac:	81 e6       	ldi	r24, 0x61	; 97
				break;
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
     9b0:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
     9b2:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <second.1836>
     9b6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <first.1835>
	second = c;
     9ba:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <second.1836>

	return c;
}
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	08 95       	ret

000009c2 <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
     9d6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     9da:	88 23       	and	r24, r24
     9dc:	29 f1       	breq	.+74     	; 0xa28 <__vector_21+0x66>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     9de:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <out_insert_pos>
     9e2:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <bytes_in_out_buffer>
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	82 1b       	sub	r24, r18
     9ea:	91 09       	sbc	r25, r1
     9ec:	5a f4       	brpl	.+22     	; 0xa04 <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
     9ee:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <out_insert_pos>
     9f2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e8 1b       	sub	r30, r24
     9fa:	f1 09       	sbc	r31, r1
     9fc:	e7 5c       	subi	r30, 0xC7	; 199
     9fe:	fc 4f       	sbci	r31, 0xFC	; 252
     a00:	90 81       	ld	r25, Z
     a02:	0a c0       	rjmp	.+20     	; 0xa18 <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     a04:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <out_insert_pos>
     a08:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	e8 1b       	sub	r30, r24
     a10:	f1 09       	sbc	r31, r1
     a12:	e6 5c       	subi	r30, 0xC6	; 198
     a14:	fd 4f       	sbci	r31, 0xFD	; 253
     a16:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
     a18:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     a1c:	81 50       	subi	r24, 0x01	; 1
     a1e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
     a22:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <__vector_21+0x70>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
     a28:	e1 ec       	ldi	r30, 0xC1	; 193
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	8f 7d       	andi	r24, 0xDF	; 223
     a30:	80 83       	st	Z, r24
	}
}
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	cf 93       	push	r28
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
     a6a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     a6e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <do_echo>
     a72:	88 23       	and	r24, r24
     a74:	49 f0       	breq	.+18     	; 0xa88 <__vector_20+0x42>
     a76:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <bytes_in_out_buffer>
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	29 f0       	breq	.+10     	; 0xa88 <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	8c 2f       	mov	r24, r28
     a84:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     a88:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <bytes_in_input_buffer>
     a8c:	80 31       	cpi	r24, 0x10	; 16
     a8e:	20 f0       	brcs	.+8      	; 0xa98 <__vector_20+0x52>
	{
		input_overrun = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <input_overrun>
     a96:	18 c0       	rjmp	.+48     	; 0xac8 <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
     a98:	cd 30       	cpi	r28, 0x0D	; 13
     a9a:	09 f4       	brne	.+2      	; 0xa9e <__vector_20+0x58>
		{
			c = '\n';
     a9c:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
     a9e:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <input_insert_pos>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	8e 0f       	add	r24, r30
     aa6:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <input_insert_pos>
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	e6 5c       	subi	r30, 0xC6	; 198
     aae:	fc 4f       	sbci	r31, 0xFC	; 252
     ab0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     ab2:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <bytes_in_input_buffer>
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     abc:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <input_insert_pos>
     ac0:	80 31       	cpi	r24, 0x10	; 16
     ac2:	11 f4       	brne	.+4      	; 0xac8 <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
     ac4:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <input_insert_pos>
		}
	}
}
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	cf 91       	pop	r28
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
     aec:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <out_insert_pos>
	bytes_in_out_buffer = 0;
     af0:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <bytes_in_out_buffer>
	input_insert_pos = 0;
     af4:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <input_insert_pos>
	bytes_in_input_buffer = 0;
     af8:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <bytes_in_input_buffer>
	input_overrun = 0;
     afc:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
     b00:	40 93 29 02 	sts	0x0229, r20	; 0x800229 <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	aa 1f       	adc	r26, r26
     b0e:	bb 1f       	adc	r27, r27
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	aa 1f       	adc	r26, r26
     b16:	bb 1f       	adc	r27, r27
     b18:	9c 01       	movw	r18, r24
     b1a:	ad 01       	movw	r20, r26
     b1c:	22 0f       	add	r18, r18
     b1e:	33 1f       	adc	r19, r19
     b20:	44 1f       	adc	r20, r20
     b22:	55 1f       	adc	r21, r21
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	72 e1       	ldi	r23, 0x12	; 18
     b28:	8a e7       	ldi	r24, 0x7A	; 122
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 4e 08 	call	0x109c	; 0x109c <__divmodsi4>
     b30:	ba 01       	movw	r22, r20
     b32:	a9 01       	movw	r20, r18
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	6f 4f       	sbci	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	db 01       	movw	r26, r22
     b3e:	ca 01       	movw	r24, r20
     b40:	1a f4       	brpl	.+6      	; 0xb48 <init_serial_stdio+0x5c>
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	a1 1d       	adc	r26, r1
     b46:	b1 1d       	adc	r27, r1
     b48:	b5 95       	asr	r27
     b4a:	a7 95       	ror	r26
     b4c:	97 95       	ror	r25
     b4e:	87 95       	ror	r24
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b56:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     b5a:	e1 ec       	ldi	r30, 0xC1	; 193
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	88 e1       	ldi	r24, 0x18	; 24
     b60:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
     b68:	ec e4       	ldi	r30, 0x4C	; 76
     b6a:	f3 e0       	ldi	r31, 0x03	; 3
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	93 83       	std	Z+3, r25	; 0x03
     b72:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
     b74:	91 83       	std	Z+1, r25	; 0x01
     b76:	80 83       	st	Z, r24
     b78:	08 95       	ret

00000b7a <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
     b7a:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <bytes_in_input_buffer>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	91 11       	cpse	r25, r1
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <serial_input_available+0xc>
     b84:	80 e0       	ldi	r24, 0x00	; 0
}
     b86:	08 95       	ret

00000b88 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
     b88:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <input_insert_pos>
	bytes_in_input_buffer = 0;
     b8c:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <bytes_in_input_buffer>
     b90:	08 95       	ret

00000b92 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     b92:	94 b1       	in	r25, 0x04	; 4
     b94:	90 6b       	ori	r25, 0xB0	; 176
     b96:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
     b98:	95 b1       	in	r25, 0x05	; 5
     b9a:	90 61       	ori	r25, 0x10	; 16
     b9c:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     b9e:	90 e5       	ldi	r25, 0x50	; 80
     ba0:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
     ba2:	88 30       	cpi	r24, 0x08	; 8
     ba4:	21 f0       	breq	.+8      	; 0xbae <spi_setup_master+0x1c>
     ba6:	80 32       	cpi	r24, 0x20	; 32
     ba8:	11 f0       	breq	.+4      	; 0xbae <spi_setup_master+0x1c>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	19 f4       	brne	.+6      	; 0xbb4 <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9d bd       	out	0x2d, r25	; 45
			break;
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     bb4:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
     bb6:	80 32       	cpi	r24, 0x20	; 32
     bb8:	69 f0       	breq	.+26     	; 0xbd4 <spi_setup_master+0x42>
     bba:	28 f4       	brcc	.+10     	; 0xbc6 <spi_setup_master+0x34>
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	71 f0       	breq	.+28     	; 0xbdc <spi_setup_master+0x4a>
     bc0:	80 31       	cpi	r24, 0x10	; 16
     bc2:	61 f0       	breq	.+24     	; 0xbdc <spi_setup_master+0x4a>
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <spi_setup_master+0x50>
     bc6:	80 34       	cpi	r24, 0x40	; 64
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <spi_setup_master+0x42>
     bca:	80 38       	cpi	r24, 0x80	; 128
     bcc:	51 f4       	brne	.+20     	; 0xbe2 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
     bce:	8c b5       	in	r24, 0x2c	; 44
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
     bd4:	8c b5       	in	r24, 0x2c	; 44
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	8c bd       	out	0x2c, r24	; 44
			break;
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
     bdc:	8c b5       	in	r24, 0x2c	; 44
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
     be2:	85 b1       	in	r24, 0x05	; 5
     be4:	8f 7e       	andi	r24, 0xEF	; 239
     be6:	85 b9       	out	0x05, r24	; 5
     be8:	08 95       	ret

00000bea <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
     bea:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
     bec:	0d b4       	in	r0, 0x2d	; 45
     bee:	07 fe       	sbrs	r0, 7
     bf0:	fd cf       	rjmp	.-6      	; 0xbec <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
     bf2:	8e b5       	in	r24, 0x2e	; 46
}
     bf4:	08 95       	ret

00000bf6 <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	28 97       	sbiw	r28, 0x08	; 8
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
     c0c:	10 e0       	ldi	r17, 0x00	; 0
     c0e:	17 c0       	rjmp	.+46     	; 0xc3e <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
     c10:	61 2f       	mov	r22, r17
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	66 0f       	add	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	66 0f       	add	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	67 5d       	subi	r22, 0xD7	; 215
     c22:	7e 4f       	sbci	r23, 0xFE	; 254
     c24:	48 e0       	ldi	r20, 0x08	; 8
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 c8 08 	call	0x1190	; 0x1190 <memcpy_P>
		ledmatrix_update_column(col, column_data);
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	81 2f       	mov	r24, r17
     c38:	0e 94 09 03 	call	0x612	; 0x612 <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
     c3c:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
     c3e:	10 31       	cpi	r17, 0x10	; 16
     c40:	38 f3       	brcs	.-50     	; 0xc10 <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
     c42:	28 96       	adiw	r28, 0x08	; 8
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	28 97       	sbiw	r28, 0x08	; 8
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
     c6a:	0e 94 26 03 	call	0x64c	; 0x64c <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
     c6e:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <next_column>
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	66 0f       	add	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	66 0f       	add	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	67 5d       	subi	r22, 0xD7	; 215
     c82:	7e 4f       	sbci	r23, 0xFE	; 254
     c84:	48 e0       	ldi	r20, 0x08	; 8
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 c8 08 	call	0x1190	; 0x1190 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
     c90:	be 01       	movw	r22, r28
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	8f e0       	ldi	r24, 0x0F	; 15
     c98:	0e 94 09 03 	call	0x612	; 0x612 <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
     c9c:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <next_column>
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	4f 5f       	subi	r20, 0xFF	; 255
     ca4:	5f 4f       	sbci	r21, 0xFF	; 255
     ca6:	9a 01       	movw	r18, r20
     ca8:	36 95       	lsr	r19
     caa:	27 95       	ror	r18
     cac:	ab e7       	ldi	r26, 0x7B	; 123
     cae:	b4 e1       	ldi	r27, 0x14	; 20
     cb0:	0e 94 6d 08 	call	0x10da	; 0x10da <__umulhisi3>
     cb4:	96 95       	lsr	r25
     cb6:	87 95       	ror	r24
     cb8:	62 e3       	ldi	r22, 0x32	; 50
     cba:	68 9f       	mul	r22, r24
     cbc:	90 01       	movw	r18, r0
     cbe:	69 9f       	mul	r22, r25
     cc0:	30 0d       	add	r19, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	ca 01       	movw	r24, r20
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
     cce:	80 31       	cpi	r24, 0x10	; 16
     cd0:	29 f4       	brne	.+10     	; 0xcdc <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
     cd2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <flags>
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flags>
	}
}
     cdc:	28 96       	adiw	r28, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	28 97       	sbiw	r28, 0x08	; 8
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	f6 2e       	mov	r15, r22
     d0c:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
     d0e:	68 2f       	mov	r22, r24
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	66 0f       	add	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	6f 5f       	subi	r22, 0xFF	; 255
     d20:	7e 4f       	sbci	r23, 0xFE	; 254
     d22:	48 e0       	ldi	r20, 0x08	; 8
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 c8 08 	call	0x1190	; 0x1190 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
     d2e:	0f e3       	ldi	r16, 0x3F	; 63
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	0f 19       	sub	r16, r15
     d34:	11 09       	sbc	r17, r1
     d36:	29 81       	ldd	r18, Y+1	; 0x01
     d38:	3a 81       	ldd	r19, Y+2	; 0x02
     d3a:	4b 81       	ldd	r20, Y+3	; 0x03
     d3c:	5c 81       	ldd	r21, Y+4	; 0x04
     d3e:	6d 81       	ldd	r22, Y+5	; 0x05
     d40:	7e 81       	ldd	r23, Y+6	; 0x06
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__lshrdi3>
     d4a:	21 70       	andi	r18, 0x01	; 1
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	0e 94 9a 08 	call	0x1134	; 0x1134 <__cmpdi2_s8>
     d60:	c1 f0       	breq	.+48     	; 0xd92 <display_title_pixel+0xa4>
	{
		if (!coloured)
     d62:	e1 10       	cpse	r14, r1
     d64:	1b c0       	rjmp	.+54     	; 0xd9c <display_title_pixel+0xae>
     d66:	10 e0       	ldi	r17, 0x00	; 0
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
     d6a:	81 2f       	mov	r24, r17
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	fc 01       	movw	r30, r24
     d70:	ea 56       	subi	r30, 0x6A	; 106
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	20 81       	ld	r18, Z
     d76:	2f 15       	cp	r18, r15
     d78:	30 f0       	brcs	.+12     	; 0xd86 <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
     d7a:	fc 01       	movw	r30, r24
     d7c:	e1 57       	subi	r30, 0x71	; 113
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	80 81       	ld	r24, Z
     d82:	0e 94 e5 07 	call	0xfca	; 0xfca <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
     d86:	1f 5f       	subi	r17, 0xFF	; 255
     d88:	17 30       	cpi	r17, 0x07	; 7
     d8a:	78 f3       	brcs	.-34     	; 0xd6a <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
     d8c:	ee 24       	eor	r14, r14
     d8e:	e3 94       	inc	r14
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
     d92:	ee 20       	and	r14, r14
     d94:	19 f0       	breq	.+6      	; 0xd9c <display_title_pixel+0xae>
		{
			normal_display_mode();
     d96:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <normal_display_mode>
			coloured = false;
     d9a:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
     d9c:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <__iob+0x2>
     da0:	70 91 4f 03 	lds	r23, 0x034F	; 0x80034f <__iob+0x3>
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
	return coloured;
}
     dac:	8e 2d       	mov	r24, r14
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	08 95       	ret

00000dc8 <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
     dc8:	0e 94 2d 03 	call	0x65a	; 0x65a <ledmatrix_clear>
	display_initial_image();
     dcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
     dd0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <flags>
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flags>
     dda:	08 95       	ret

00000ddc <update_start_screen>:
}

void update_start_screen(void)
{
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
	uint32_t time = get_current_time();
     de4:	0e 94 11 08 	call	0x1022	; 0x1022 <get_current_time>
     de8:	6b 01       	movw	r12, r22
     dea:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
     dec:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <flags>
     df0:	80 ff       	sbrs	r24, 0
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <update_start_screen+0x44>
	{
		flashing_start_time = time;
     df4:	c0 92 2f 02 	sts	0x022F, r12	; 0x80022f <flashing_start_time>
     df8:	d0 92 30 02 	sts	0x0230, r13	; 0x800230 <flashing_start_time+0x1>
     dfc:	e0 92 31 02 	sts	0x0231, r14	; 0x800231 <flashing_start_time+0x2>
     e00:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <flashing_start_time+0x3>
		last_update_time = time;
     e04:	c0 92 2b 02 	sts	0x022B, r12	; 0x80022b <last_update_time>
     e08:	d0 92 2c 02 	sts	0x022C, r13	; 0x80022c <last_update_time+0x1>
     e0c:	e0 92 2d 02 	sts	0x022D, r14	; 0x80022d <last_update_time+0x2>
     e10:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
     e14:	90 e1       	ldi	r25, 0x10	; 16
     e16:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
     e1a:	88 7f       	andi	r24, 0xF8	; 248
     e1c:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
     e20:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <next_column>
     e24:	80 31       	cpi	r24, 0x10	; 16
     e26:	09 f0       	breq	.+2      	; 0xe2a <update_start_screen+0x4e>
     e28:	64 c0       	rjmp	.+200    	; 0xef2 <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
     e2a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <flashing_start_time>
     e2e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <flashing_start_time+0x1>
     e32:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <flashing_start_time+0x2>
     e36:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <flashing_start_time+0x3>
     e3a:	ac 01       	movw	r20, r24
     e3c:	bd 01       	movw	r22, r26
     e3e:	40 53       	subi	r20, 0x30	; 48
     e40:	58 4f       	sbci	r21, 0xF8	; 248
     e42:	6f 4f       	sbci	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	4c 15       	cp	r20, r12
     e48:	5d 05       	cpc	r21, r13
     e4a:	6e 05       	cpc	r22, r14
     e4c:	7f 05       	cpc	r23, r15
     e4e:	58 f4       	brcc	.+22     	; 0xe66 <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
     e50:	0e 94 2b 06 	call	0xc56	; 0xc56 <display_next_column>
			last_update_time = time;
     e54:	c0 92 2b 02 	sts	0x022B, r12	; 0x80022b <last_update_time>
     e58:	d0 92 2c 02 	sts	0x022C, r13	; 0x80022c <last_update_time+0x1>
     e5c:	e0 92 2d 02 	sts	0x022D, r14	; 0x80022d <last_update_time+0x2>
     e60:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <last_update_time+0x3>
     e64:	61 c0       	rjmp	.+194    	; 0xf28 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     e66:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <flags>
     e6a:	32 2f       	mov	r19, r18
     e6c:	32 70       	andi	r19, 0x02	; 2
     e6e:	21 fd       	sbrc	r18, 1
     e70:	19 c0       	rjmp	.+50     	; 0xea4 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
     e72:	88 51       	subi	r24, 0x18	; 24
     e74:	9c 4f       	sbci	r25, 0xFC	; 252
     e76:	af 4f       	sbci	r26, 0xFF	; 255
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     e7a:	8c 15       	cp	r24, r12
     e7c:	9d 05       	cpc	r25, r13
     e7e:	ae 05       	cpc	r26, r14
     e80:	bf 05       	cpc	r27, r15
     e82:	80 f4       	brcc	.+32     	; 0xea4 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
     e84:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
     e88:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <flags>
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flags>
			last_update_time = time;
     e92:	c0 92 2b 02 	sts	0x022B, r12	; 0x80022b <last_update_time>
     e96:	d0 92 2c 02 	sts	0x022C, r13	; 0x80022c <last_update_time+0x1>
     e9a:	e0 92 2d 02 	sts	0x022D, r14	; 0x80022d <last_update_time+0x2>
     e9e:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <last_update_time+0x3>
     ea2:	42 c0       	rjmp	.+132    	; 0xf28 <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     ea4:	31 11       	cpse	r19, r1
     ea6:	40 c0       	rjmp	.+128    	; 0xf28 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
     ea8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <last_update_time>
     eac:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <last_update_time+0x1>
     eb0:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <last_update_time+0x2>
     eb4:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <last_update_time+0x3>
     eb8:	8c 59       	subi	r24, 0x9C	; 156
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	af 4f       	sbci	r26, 0xFF	; 255
     ebe:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     ec0:	8c 15       	cp	r24, r12
     ec2:	9d 05       	cpc	r25, r13
     ec4:	ae 05       	cpc	r26, r14
     ec6:	bf 05       	cpc	r27, r15
     ec8:	78 f5       	brcc	.+94     	; 0xf28 <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	28 27       	eor	r18, r24
     ece:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <flags>
     ed2:	22 ff       	sbrs	r18, 2
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <update_start_screen+0x100>
			{
				ledmatrix_clear();
     ed6:	0e 94 2d 03 	call	0x65a	; 0x65a <ledmatrix_clear>
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
     edc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <display_initial_image>
			}
			last_update_time = time;
     ee0:	c0 92 2b 02 	sts	0x022B, r12	; 0x80022b <last_update_time>
     ee4:	d0 92 2c 02 	sts	0x022C, r13	; 0x80022c <last_update_time+0x1>
     ee8:	e0 92 2d 02 	sts	0x022D, r14	; 0x80022d <last_update_time+0x2>
     eec:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <last_update_time+0x3>
     ef0:	1b c0       	rjmp	.+54     	; 0xf28 <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
     ef2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <last_update_time>
     ef6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <last_update_time+0x1>
     efa:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <last_update_time+0x2>
     efe:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <last_update_time+0x3>
     f02:	88 53       	subi	r24, 0x38	; 56
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	af 4f       	sbci	r26, 0xFF	; 255
     f08:	bf 4f       	sbci	r27, 0xFF	; 255
     f0a:	8c 15       	cp	r24, r12
     f0c:	9d 05       	cpc	r25, r13
     f0e:	ae 05       	cpc	r26, r14
     f10:	bf 05       	cpc	r27, r15
     f12:	50 f4       	brcc	.+20     	; 0xf28 <update_start_screen+0x14c>
		{
			display_next_column();
     f14:	0e 94 2b 06 	call	0xc56	; 0xc56 <display_next_column>
			last_update_time = time;
     f18:	c0 92 2b 02 	sts	0x022B, r12	; 0x80022b <last_update_time>
     f1c:	d0 92 2c 02 	sts	0x022C, r13	; 0x80022c <last_update_time+0x1>
     f20:	e0 92 2d 02 	sts	0x022D, r14	; 0x80022d <last_update_time+0x2>
     f24:	f0 92 2e 02 	sts	0x022E, r15	; 0x80022e <last_update_time+0x3>
		}
	}
}
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	08 95       	ret

00000f32 <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	f8 2e       	mov	r15, r24
     f3e:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
     f40:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
     f42:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
     f46:	60 2f       	mov	r22, r16
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	8f 2d       	mov	r24, r15
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	81 0f       	add	r24, r17
     f50:	91 1d       	adc	r25, r1
     f52:	0e 94 bf 07 	call	0xf7e	; 0xf7e <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
     f56:	c0 e0       	ldi	r28, 0x00	; 0
     f58:	07 c0       	rjmp	.+14     	; 0xf68 <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
     f5a:	4d 2f       	mov	r20, r29
     f5c:	6c 2f       	mov	r22, r28
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 77 06 	call	0xcee	; 0xcee <display_title_pixel>
     f64:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
     f66:	cf 5f       	subi	r28, 0xFF	; 255
     f68:	c0 34       	cpi	r28, 0x40	; 64
     f6a:	b8 f3       	brcs	.-18     	; 0xf5a <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
     f6c:	1f 5f       	subi	r17, 0xFF	; 255
     f6e:	15 30       	cpi	r17, 0x05	; 5
     f70:	50 f3       	brcs	.-44     	; 0xf46 <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	08 95       	ret

00000f7e <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	7f 93       	push	r23
     f84:	6f 93       	push	r22
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	9f 93       	push	r25
     f8a:	8f 93       	push	r24
     f8c:	80 ed       	ldi	r24, 0xD0	; 208
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	08 95       	ret

00000fa6 <normal_display_mode>:
     fa6:	8b ec       	ldi	r24, 0xCB	; 203
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	08 95       	ret

00000fb8 <clear_terminal>:
     fb8:	86 ec       	ldi	r24, 0xC6	; 198
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	08 95       	ret

00000fca <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
     fca:	1f 92       	push	r1
     fcc:	8f 93       	push	r24
     fce:	80 ec       	ldi	r24, 0xC0	; 192
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	9f 93       	push	r25
     fd4:	8f 93       	push	r24
     fd6:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	08 95       	ret

00000fe4 <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
     fe4:	89 eb       	ldi	r24, 0xB9	; 185
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	0e 94 4b 09 	call	0x1296	; 0x1296 <printf_P>
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	08 95       	ret

00000ff6 <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
     ff6:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <clock_ticks_ms>
     ffa:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <clock_ticks_ms+0x1>
     ffe:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <clock_ticks_ms+0x2>
    1002:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
    1006:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
    1008:	8c e7       	ldi	r24, 0x7C	; 124
    100a:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
    1014:	ee e6       	ldi	r30, 0x6E	; 110
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
    101e:	95 bb       	out	0x15, r25	; 21
    1020:	08 95       	ret

00001022 <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    1022:	8f b7       	in	r24, 0x3f	; 63
    1024:	28 2f       	mov	r18, r24
    1026:	20 78       	andi	r18, 0x80	; 128
	cli();
    1028:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
    102a:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <clock_ticks_ms>
    102e:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <clock_ticks_ms+0x1>
    1032:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <clock_ticks_ms+0x2>
    1036:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
    103a:	22 23       	and	r18, r18
    103c:	09 f0       	breq	.+2      	; 0x1040 <get_current_time+0x1e>
	{
		sei();
    103e:	78 94       	sei
	}
	return result;
}
    1040:	08 95       	ret

00001042 <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
    1054:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clock_ticks_ms>
    1058:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clock_ticks_ms+0x1>
    105c:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <clock_ticks_ms+0x2>
    1060:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <clock_ticks_ms+0x3>
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	a1 1d       	adc	r26, r1
    1068:	b1 1d       	adc	r27, r1
    106a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clock_ticks_ms>
    106e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clock_ticks_ms+0x1>
    1072:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <clock_ticks_ms+0x2>
    1076:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <clock_ticks_ms+0x3>
}
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
    108c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1090:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1094:	08 95       	ret

00001096 <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
    1096:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    109a:	08 95       	ret

0000109c <__divmodsi4>:
    109c:	05 2e       	mov	r0, r21
    109e:	97 fb       	bst	r25, 7
    10a0:	1e f4       	brtc	.+6      	; 0x10a8 <__divmodsi4+0xc>
    10a2:	00 94       	com	r0
    10a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__negsi2>
    10a8:	57 fd       	sbrc	r21, 7
    10aa:	07 d0       	rcall	.+14     	; 0x10ba <__divmodsi4_neg2>
    10ac:	0e 94 a6 08 	call	0x114c	; 0x114c <__udivmodsi4>
    10b0:	07 fc       	sbrc	r0, 7
    10b2:	03 d0       	rcall	.+6      	; 0x10ba <__divmodsi4_neg2>
    10b4:	4e f4       	brtc	.+18     	; 0x10c8 <__divmodsi4_exit>
    10b6:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__negsi2>

000010ba <__divmodsi4_neg2>:
    10ba:	50 95       	com	r21
    10bc:	40 95       	com	r20
    10be:	30 95       	com	r19
    10c0:	21 95       	neg	r18
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	4f 4f       	sbci	r20, 0xFF	; 255
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255

000010c8 <__divmodsi4_exit>:
    10c8:	08 95       	ret

000010ca <__negsi2>:
    10ca:	90 95       	com	r25
    10cc:	80 95       	com	r24
    10ce:	70 95       	com	r23
    10d0:	61 95       	neg	r22
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__umulhisi3>:
    10da:	a2 9f       	mul	r26, r18
    10dc:	b0 01       	movw	r22, r0
    10de:	b3 9f       	mul	r27, r19
    10e0:	c0 01       	movw	r24, r0
    10e2:	a3 9f       	mul	r26, r19
    10e4:	70 0d       	add	r23, r0
    10e6:	81 1d       	adc	r24, r1
    10e8:	11 24       	eor	r1, r1
    10ea:	91 1d       	adc	r25, r1
    10ec:	b2 9f       	mul	r27, r18
    10ee:	70 0d       	add	r23, r0
    10f0:	81 1d       	adc	r24, r1
    10f2:	11 24       	eor	r1, r1
    10f4:	91 1d       	adc	r25, r1
    10f6:	08 95       	ret

000010f8 <__ashrdi3>:
    10f8:	97 fb       	bst	r25, 7
    10fa:	10 f8       	bld	r1, 0

000010fc <__lshrdi3>:
    10fc:	16 94       	lsr	r1
    10fe:	00 08       	sbc	r0, r0
    1100:	0f 93       	push	r16
    1102:	08 30       	cpi	r16, 0x08	; 8
    1104:	98 f0       	brcs	.+38     	; 0x112c <__lshrdi3+0x30>
    1106:	08 50       	subi	r16, 0x08	; 8
    1108:	23 2f       	mov	r18, r19
    110a:	34 2f       	mov	r19, r20
    110c:	45 2f       	mov	r20, r21
    110e:	56 2f       	mov	r21, r22
    1110:	67 2f       	mov	r22, r23
    1112:	78 2f       	mov	r23, r24
    1114:	89 2f       	mov	r24, r25
    1116:	90 2d       	mov	r25, r0
    1118:	f4 cf       	rjmp	.-24     	; 0x1102 <__lshrdi3+0x6>
    111a:	05 94       	asr	r0
    111c:	97 95       	ror	r25
    111e:	87 95       	ror	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	57 95       	ror	r21
    1126:	47 95       	ror	r20
    1128:	37 95       	ror	r19
    112a:	27 95       	ror	r18
    112c:	0a 95       	dec	r16
    112e:	aa f7       	brpl	.-22     	; 0x111a <__lshrdi3+0x1e>
    1130:	0f 91       	pop	r16
    1132:	08 95       	ret

00001134 <__cmpdi2_s8>:
    1134:	00 24       	eor	r0, r0
    1136:	a7 fd       	sbrc	r26, 7
    1138:	00 94       	com	r0
    113a:	2a 17       	cp	r18, r26
    113c:	30 05       	cpc	r19, r0
    113e:	40 05       	cpc	r20, r0
    1140:	50 05       	cpc	r21, r0
    1142:	60 05       	cpc	r22, r0
    1144:	70 05       	cpc	r23, r0
    1146:	80 05       	cpc	r24, r0
    1148:	90 05       	cpc	r25, r0
    114a:	08 95       	ret

0000114c <__udivmodsi4>:
    114c:	a1 e2       	ldi	r26, 0x21	; 33
    114e:	1a 2e       	mov	r1, r26
    1150:	aa 1b       	sub	r26, r26
    1152:	bb 1b       	sub	r27, r27
    1154:	fd 01       	movw	r30, r26
    1156:	0d c0       	rjmp	.+26     	; 0x1172 <__udivmodsi4_ep>

00001158 <__udivmodsi4_loop>:
    1158:	aa 1f       	adc	r26, r26
    115a:	bb 1f       	adc	r27, r27
    115c:	ee 1f       	adc	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	a2 17       	cp	r26, r18
    1162:	b3 07       	cpc	r27, r19
    1164:	e4 07       	cpc	r30, r20
    1166:	f5 07       	cpc	r31, r21
    1168:	20 f0       	brcs	.+8      	; 0x1172 <__udivmodsi4_ep>
    116a:	a2 1b       	sub	r26, r18
    116c:	b3 0b       	sbc	r27, r19
    116e:	e4 0b       	sbc	r30, r20
    1170:	f5 0b       	sbc	r31, r21

00001172 <__udivmodsi4_ep>:
    1172:	66 1f       	adc	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	1a 94       	dec	r1
    117c:	69 f7       	brne	.-38     	; 0x1158 <__udivmodsi4_loop>
    117e:	60 95       	com	r22
    1180:	70 95       	com	r23
    1182:	80 95       	com	r24
    1184:	90 95       	com	r25
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	bd 01       	movw	r22, r26
    118c:	cf 01       	movw	r24, r30
    118e:	08 95       	ret

00001190 <memcpy_P>:
    1190:	fb 01       	movw	r30, r22
    1192:	dc 01       	movw	r26, r24
    1194:	02 c0       	rjmp	.+4      	; 0x119a <memcpy_P+0xa>
    1196:	05 90       	lpm	r0, Z+
    1198:	0d 92       	st	X+, r0
    119a:	41 50       	subi	r20, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	d8 f7       	brcc	.-10     	; 0x1196 <memcpy_P+0x6>
    11a0:	08 95       	ret

000011a2 <fgetc>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	20 ff       	sbrs	r18, 0
    11ac:	33 c0       	rjmp	.+102    	; 0x1214 <fgetc+0x72>
    11ae:	26 ff       	sbrs	r18, 6
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <fgetc+0x24>
    11b2:	2f 7b       	andi	r18, 0xBF	; 191
    11b4:	2b 83       	std	Y+3, r18	; 0x03
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	9f 83       	std	Y+7, r25	; 0x07
    11be:	8e 83       	std	Y+6, r24	; 0x06
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	29 c0       	rjmp	.+82     	; 0x1218 <fgetc+0x76>
    11c6:	22 ff       	sbrs	r18, 2
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <fgetc+0x46>
    11ca:	e8 81       	ld	r30, Y
    11cc:	f9 81       	ldd	r31, Y+1	; 0x01
    11ce:	80 81       	ld	r24, Z
    11d0:	08 2e       	mov	r0, r24
    11d2:	00 0c       	add	r0, r0
    11d4:	99 0b       	sbc	r25, r25
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <fgetc+0x3e>
    11da:	20 62       	ori	r18, 0x20	; 32
    11dc:	2b 83       	std	Y+3, r18	; 0x03
    11de:	1a c0       	rjmp	.+52     	; 0x1214 <fgetc+0x72>
    11e0:	31 96       	adiw	r30, 0x01	; 1
    11e2:	f9 83       	std	Y+1, r31	; 0x01
    11e4:	e8 83       	st	Y, r30
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <fgetc+0x62>
    11e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    11ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    11ec:	09 95       	icall
    11ee:	97 ff       	sbrs	r25, 7
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <fgetc+0x62>
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	11 f0       	breq	.+4      	; 0x11fc <fgetc+0x5a>
    11f8:	80 e2       	ldi	r24, 0x20	; 32
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <fgetc+0x5c>
    11fc:	80 e1       	ldi	r24, 0x10	; 16
    11fe:	82 2b       	or	r24, r18
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <fgetc+0x72>
    1204:	2e 81       	ldd	r18, Y+6	; 0x06
    1206:	3f 81       	ldd	r19, Y+7	; 0x07
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	3f 83       	std	Y+7, r19	; 0x07
    120e:	2e 83       	std	Y+6, r18	; 0x06
    1210:	99 27       	eor	r25, r25
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <fgetc+0x76>
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <fputc>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	fb 01       	movw	r30, r22
    1228:	23 81       	ldd	r18, Z+3	; 0x03
    122a:	21 fd       	sbrc	r18, 1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <fputc+0x16>
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	2c c0       	rjmp	.+88     	; 0x128c <fputc+0x6e>
    1234:	22 ff       	sbrs	r18, 2
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <fputc+0x46>
    1238:	46 81       	ldd	r20, Z+6	; 0x06
    123a:	57 81       	ldd	r21, Z+7	; 0x07
    123c:	24 81       	ldd	r18, Z+4	; 0x04
    123e:	35 81       	ldd	r19, Z+5	; 0x05
    1240:	42 17       	cp	r20, r18
    1242:	53 07       	cpc	r21, r19
    1244:	44 f4       	brge	.+16     	; 0x1256 <fputc+0x38>
    1246:	a0 81       	ld	r26, Z
    1248:	b1 81       	ldd	r27, Z+1	; 0x01
    124a:	9d 01       	movw	r18, r26
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	31 83       	std	Z+1, r19	; 0x01
    1252:	20 83       	st	Z, r18
    1254:	8c 93       	st	X, r24
    1256:	26 81       	ldd	r18, Z+6	; 0x06
    1258:	37 81       	ldd	r19, Z+7	; 0x07
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	37 83       	std	Z+7, r19	; 0x07
    1260:	26 83       	std	Z+6, r18	; 0x06
    1262:	14 c0       	rjmp	.+40     	; 0x128c <fputc+0x6e>
    1264:	8b 01       	movw	r16, r22
    1266:	ec 01       	movw	r28, r24
    1268:	fb 01       	movw	r30, r22
    126a:	00 84       	ldd	r0, Z+8	; 0x08
    126c:	f1 85       	ldd	r31, Z+9	; 0x09
    126e:	e0 2d       	mov	r30, r0
    1270:	09 95       	icall
    1272:	89 2b       	or	r24, r25
    1274:	e1 f6       	brne	.-72     	; 0x122e <fputc+0x10>
    1276:	d8 01       	movw	r26, r16
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	8d 91       	ld	r24, X+
    127c:	9c 91       	ld	r25, X
    127e:	17 97       	sbiw	r26, 0x07	; 7
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	17 96       	adiw	r26, 0x07	; 7
    1284:	9c 93       	st	X, r25
    1286:	8e 93       	st	-X, r24
    1288:	16 97       	sbiw	r26, 0x06	; 6
    128a:	ce 01       	movw	r24, r28
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <printf_P>:
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e5       	ldi	r30, 0x51	; 81
    129c:	f9 e0       	ldi	r31, 0x09	; 9
    129e:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__prologue_saves__+0x1c>
    12a2:	ae 01       	movw	r20, r28
    12a4:	49 5f       	subi	r20, 0xF9	; 249
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	da 01       	movw	r26, r20
    12aa:	6d 91       	ld	r22, X+
    12ac:	7d 91       	ld	r23, X+
    12ae:	ad 01       	movw	r20, r26
    12b0:	0c e4       	ldi	r16, 0x4C	; 76
    12b2:	13 e0       	ldi	r17, 0x03	; 3
    12b4:	f8 01       	movw	r30, r16
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	dc 01       	movw	r26, r24
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	2c 91       	ld	r18, X
    12c0:	13 97       	sbiw	r26, 0x03	; 3
    12c2:	28 60       	ori	r18, 0x08	; 8
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	2c 93       	st	X, r18
    12c8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <vfprintf>
    12cc:	d8 01       	movw	r26, r16
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	ed 91       	ld	r30, X+
    12d2:	fc 91       	ld	r31, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	23 81       	ldd	r18, Z+3	; 0x03
    12d8:	27 7f       	andi	r18, 0xF7	; 247
    12da:	23 83       	std	Z+3, r18	; 0x03
    12dc:	e4 e0       	ldi	r30, 0x04	; 4
    12de:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__epilogue_restores__+0x1c>

000012e2 <vfprintf>:
    12e2:	ab e0       	ldi	r26, 0x0B	; 11
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e7 e7       	ldi	r30, 0x77	; 119
    12e8:	f9 e0       	ldi	r31, 0x09	; 9
    12ea:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
    12ee:	6c 01       	movw	r12, r24
    12f0:	7b 01       	movw	r14, r22
    12f2:	8a 01       	movw	r16, r20
    12f4:	fc 01       	movw	r30, r24
    12f6:	17 82       	std	Z+7, r1	; 0x07
    12f8:	16 82       	std	Z+6, r1	; 0x06
    12fa:	83 81       	ldd	r24, Z+3	; 0x03
    12fc:	81 ff       	sbrs	r24, 1
    12fe:	cc c1       	rjmp	.+920    	; 0x1698 <vfprintf+0x3b6>
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	3c 01       	movw	r6, r24
    1306:	f6 01       	movw	r30, r12
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	f7 01       	movw	r30, r14
    130c:	93 fd       	sbrc	r25, 3
    130e:	85 91       	lpm	r24, Z+
    1310:	93 ff       	sbrs	r25, 3
    1312:	81 91       	ld	r24, Z+
    1314:	7f 01       	movw	r14, r30
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <vfprintf+0x3a>
    131a:	ba c1       	rjmp	.+884    	; 0x1690 <vfprintf+0x3ae>
    131c:	85 32       	cpi	r24, 0x25	; 37
    131e:	39 f4       	brne	.+14     	; 0x132e <vfprintf+0x4c>
    1320:	93 fd       	sbrc	r25, 3
    1322:	85 91       	lpm	r24, Z+
    1324:	93 ff       	sbrs	r25, 3
    1326:	81 91       	ld	r24, Z+
    1328:	7f 01       	movw	r14, r30
    132a:	85 32       	cpi	r24, 0x25	; 37
    132c:	29 f4       	brne	.+10     	; 0x1338 <vfprintf+0x56>
    132e:	b6 01       	movw	r22, r12
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1336:	e7 cf       	rjmp	.-50     	; 0x1306 <vfprintf+0x24>
    1338:	91 2c       	mov	r9, r1
    133a:	21 2c       	mov	r2, r1
    133c:	31 2c       	mov	r3, r1
    133e:	ff e1       	ldi	r31, 0x1F	; 31
    1340:	f3 15       	cp	r31, r3
    1342:	d8 f0       	brcs	.+54     	; 0x137a <vfprintf+0x98>
    1344:	8b 32       	cpi	r24, 0x2B	; 43
    1346:	79 f0       	breq	.+30     	; 0x1366 <vfprintf+0x84>
    1348:	38 f4       	brcc	.+14     	; 0x1358 <vfprintf+0x76>
    134a:	80 32       	cpi	r24, 0x20	; 32
    134c:	79 f0       	breq	.+30     	; 0x136c <vfprintf+0x8a>
    134e:	83 32       	cpi	r24, 0x23	; 35
    1350:	a1 f4       	brne	.+40     	; 0x137a <vfprintf+0x98>
    1352:	23 2d       	mov	r18, r3
    1354:	20 61       	ori	r18, 0x10	; 16
    1356:	1d c0       	rjmp	.+58     	; 0x1392 <vfprintf+0xb0>
    1358:	8d 32       	cpi	r24, 0x2D	; 45
    135a:	61 f0       	breq	.+24     	; 0x1374 <vfprintf+0x92>
    135c:	80 33       	cpi	r24, 0x30	; 48
    135e:	69 f4       	brne	.+26     	; 0x137a <vfprintf+0x98>
    1360:	23 2d       	mov	r18, r3
    1362:	21 60       	ori	r18, 0x01	; 1
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <vfprintf+0xb0>
    1366:	83 2d       	mov	r24, r3
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	38 2e       	mov	r3, r24
    136c:	e3 2d       	mov	r30, r3
    136e:	e4 60       	ori	r30, 0x04	; 4
    1370:	3e 2e       	mov	r3, r30
    1372:	2a c0       	rjmp	.+84     	; 0x13c8 <vfprintf+0xe6>
    1374:	f3 2d       	mov	r31, r3
    1376:	f8 60       	ori	r31, 0x08	; 8
    1378:	1d c0       	rjmp	.+58     	; 0x13b4 <vfprintf+0xd2>
    137a:	37 fc       	sbrc	r3, 7
    137c:	2d c0       	rjmp	.+90     	; 0x13d8 <vfprintf+0xf6>
    137e:	20 ed       	ldi	r18, 0xD0	; 208
    1380:	28 0f       	add	r18, r24
    1382:	2a 30       	cpi	r18, 0x0A	; 10
    1384:	40 f0       	brcs	.+16     	; 0x1396 <vfprintf+0xb4>
    1386:	8e 32       	cpi	r24, 0x2E	; 46
    1388:	b9 f4       	brne	.+46     	; 0x13b8 <vfprintf+0xd6>
    138a:	36 fc       	sbrc	r3, 6
    138c:	81 c1       	rjmp	.+770    	; 0x1690 <vfprintf+0x3ae>
    138e:	23 2d       	mov	r18, r3
    1390:	20 64       	ori	r18, 0x40	; 64
    1392:	32 2e       	mov	r3, r18
    1394:	19 c0       	rjmp	.+50     	; 0x13c8 <vfprintf+0xe6>
    1396:	36 fe       	sbrs	r3, 6
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0xc4>
    139a:	8a e0       	ldi	r24, 0x0A	; 10
    139c:	98 9e       	mul	r9, r24
    139e:	20 0d       	add	r18, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	92 2e       	mov	r9, r18
    13a4:	11 c0       	rjmp	.+34     	; 0x13c8 <vfprintf+0xe6>
    13a6:	ea e0       	ldi	r30, 0x0A	; 10
    13a8:	2e 9e       	mul	r2, r30
    13aa:	20 0d       	add	r18, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	22 2e       	mov	r2, r18
    13b0:	f3 2d       	mov	r31, r3
    13b2:	f0 62       	ori	r31, 0x20	; 32
    13b4:	3f 2e       	mov	r3, r31
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <vfprintf+0xe6>
    13b8:	8c 36       	cpi	r24, 0x6C	; 108
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <vfprintf+0xe2>
    13bc:	83 2d       	mov	r24, r3
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	38 2e       	mov	r3, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <vfprintf+0xe6>
    13c4:	88 36       	cpi	r24, 0x68	; 104
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <vfprintf+0xf6>
    13c8:	f7 01       	movw	r30, r14
    13ca:	93 fd       	sbrc	r25, 3
    13cc:	85 91       	lpm	r24, Z+
    13ce:	93 ff       	sbrs	r25, 3
    13d0:	81 91       	ld	r24, Z+
    13d2:	7f 01       	movw	r14, r30
    13d4:	81 11       	cpse	r24, r1
    13d6:	b3 cf       	rjmp	.-154    	; 0x133e <vfprintf+0x5c>
    13d8:	98 2f       	mov	r25, r24
    13da:	9f 7d       	andi	r25, 0xDF	; 223
    13dc:	95 54       	subi	r25, 0x45	; 69
    13de:	93 30       	cpi	r25, 0x03	; 3
    13e0:	28 f4       	brcc	.+10     	; 0x13ec <vfprintf+0x10a>
    13e2:	0c 5f       	subi	r16, 0xFC	; 252
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	9f e3       	ldi	r25, 0x3F	; 63
    13e8:	99 83       	std	Y+1, r25	; 0x01
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <vfprintf+0x124>
    13ec:	83 36       	cpi	r24, 0x63	; 99
    13ee:	31 f0       	breq	.+12     	; 0x13fc <vfprintf+0x11a>
    13f0:	83 37       	cpi	r24, 0x73	; 115
    13f2:	71 f0       	breq	.+28     	; 0x1410 <vfprintf+0x12e>
    13f4:	83 35       	cpi	r24, 0x53	; 83
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfprintf+0x118>
    13f8:	59 c0       	rjmp	.+178    	; 0x14ac <vfprintf+0x1ca>
    13fa:	21 c0       	rjmp	.+66     	; 0x143e <vfprintf+0x15c>
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 81       	ld	r24, Z
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	0e 5f       	subi	r16, 0xFE	; 254
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	88 24       	eor	r8, r8
    1408:	83 94       	inc	r8
    140a:	91 2c       	mov	r9, r1
    140c:	53 01       	movw	r10, r6
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <vfprintf+0x154>
    1410:	28 01       	movw	r4, r16
    1412:	f2 e0       	ldi	r31, 0x02	; 2
    1414:	4f 0e       	add	r4, r31
    1416:	51 1c       	adc	r5, r1
    1418:	f8 01       	movw	r30, r16
    141a:	a0 80       	ld	r10, Z
    141c:	b1 80       	ldd	r11, Z+1	; 0x01
    141e:	36 fe       	sbrs	r3, 6
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <vfprintf+0x146>
    1422:	69 2d       	mov	r22, r9
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x14a>
    1428:	6f ef       	ldi	r22, 0xFF	; 255
    142a:	7f ef       	ldi	r23, 0xFF	; 255
    142c:	c5 01       	movw	r24, r10
    142e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <strnlen>
    1432:	4c 01       	movw	r8, r24
    1434:	82 01       	movw	r16, r4
    1436:	f3 2d       	mov	r31, r3
    1438:	ff 77       	andi	r31, 0x7F	; 127
    143a:	3f 2e       	mov	r3, r31
    143c:	16 c0       	rjmp	.+44     	; 0x146a <vfprintf+0x188>
    143e:	28 01       	movw	r4, r16
    1440:	22 e0       	ldi	r18, 0x02	; 2
    1442:	42 0e       	add	r4, r18
    1444:	51 1c       	adc	r5, r1
    1446:	f8 01       	movw	r30, r16
    1448:	a0 80       	ld	r10, Z
    144a:	b1 80       	ldd	r11, Z+1	; 0x01
    144c:	36 fe       	sbrs	r3, 6
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x174>
    1450:	69 2d       	mov	r22, r9
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x178>
    1456:	6f ef       	ldi	r22, 0xFF	; 255
    1458:	7f ef       	ldi	r23, 0xFF	; 255
    145a:	c5 01       	movw	r24, r10
    145c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strnlen_P>
    1460:	4c 01       	movw	r8, r24
    1462:	f3 2d       	mov	r31, r3
    1464:	f0 68       	ori	r31, 0x80	; 128
    1466:	3f 2e       	mov	r3, r31
    1468:	82 01       	movw	r16, r4
    146a:	33 fc       	sbrc	r3, 3
    146c:	1b c0       	rjmp	.+54     	; 0x14a4 <vfprintf+0x1c2>
    146e:	82 2d       	mov	r24, r2
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	88 16       	cp	r8, r24
    1474:	99 06       	cpc	r9, r25
    1476:	b0 f4       	brcc	.+44     	; 0x14a4 <vfprintf+0x1c2>
    1478:	b6 01       	movw	r22, r12
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1482:	2a 94       	dec	r2
    1484:	f4 cf       	rjmp	.-24     	; 0x146e <vfprintf+0x18c>
    1486:	f5 01       	movw	r30, r10
    1488:	37 fc       	sbrc	r3, 7
    148a:	85 91       	lpm	r24, Z+
    148c:	37 fe       	sbrs	r3, 7
    148e:	81 91       	ld	r24, Z+
    1490:	5f 01       	movw	r10, r30
    1492:	b6 01       	movw	r22, r12
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    149a:	21 10       	cpse	r2, r1
    149c:	2a 94       	dec	r2
    149e:	21 e0       	ldi	r18, 0x01	; 1
    14a0:	82 1a       	sub	r8, r18
    14a2:	91 08       	sbc	r9, r1
    14a4:	81 14       	cp	r8, r1
    14a6:	91 04       	cpc	r9, r1
    14a8:	71 f7       	brne	.-36     	; 0x1486 <vfprintf+0x1a4>
    14aa:	e8 c0       	rjmp	.+464    	; 0x167c <vfprintf+0x39a>
    14ac:	84 36       	cpi	r24, 0x64	; 100
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <vfprintf+0x1d2>
    14b0:	89 36       	cpi	r24, 0x69	; 105
    14b2:	41 f5       	brne	.+80     	; 0x1504 <vfprintf+0x222>
    14b4:	f8 01       	movw	r30, r16
    14b6:	37 fe       	sbrs	r3, 7
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <vfprintf+0x1e6>
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	0c 5f       	subi	r16, 0xFC	; 252
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	08 c0       	rjmp	.+16     	; 0x14d8 <vfprintf+0x1f6>
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	07 2e       	mov	r0, r23
    14ce:	00 0c       	add	r0, r0
    14d0:	88 0b       	sbc	r24, r24
    14d2:	99 0b       	sbc	r25, r25
    14d4:	0e 5f       	subi	r16, 0xFE	; 254
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	f3 2d       	mov	r31, r3
    14da:	ff 76       	andi	r31, 0x6F	; 111
    14dc:	3f 2e       	mov	r3, r31
    14de:	97 ff       	sbrs	r25, 7
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <vfprintf+0x212>
    14e2:	90 95       	com	r25
    14e4:	80 95       	com	r24
    14e6:	70 95       	com	r23
    14e8:	61 95       	neg	r22
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	f0 68       	ori	r31, 0x80	; 128
    14f2:	3f 2e       	mov	r3, r31
    14f4:	2a e0       	ldi	r18, 0x0A	; 10
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	a3 01       	movw	r20, r6
    14fa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ultoa_invert>
    14fe:	88 2e       	mov	r8, r24
    1500:	86 18       	sub	r8, r6
    1502:	45 c0       	rjmp	.+138    	; 0x158e <vfprintf+0x2ac>
    1504:	85 37       	cpi	r24, 0x75	; 117
    1506:	31 f4       	brne	.+12     	; 0x1514 <vfprintf+0x232>
    1508:	23 2d       	mov	r18, r3
    150a:	2f 7e       	andi	r18, 0xEF	; 239
    150c:	b2 2e       	mov	r11, r18
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	25 c0       	rjmp	.+74     	; 0x155e <vfprintf+0x27c>
    1514:	93 2d       	mov	r25, r3
    1516:	99 7f       	andi	r25, 0xF9	; 249
    1518:	b9 2e       	mov	r11, r25
    151a:	8f 36       	cpi	r24, 0x6F	; 111
    151c:	c1 f0       	breq	.+48     	; 0x154e <vfprintf+0x26c>
    151e:	18 f4       	brcc	.+6      	; 0x1526 <vfprintf+0x244>
    1520:	88 35       	cpi	r24, 0x58	; 88
    1522:	79 f0       	breq	.+30     	; 0x1542 <vfprintf+0x260>
    1524:	b5 c0       	rjmp	.+362    	; 0x1690 <vfprintf+0x3ae>
    1526:	80 37       	cpi	r24, 0x70	; 112
    1528:	19 f0       	breq	.+6      	; 0x1530 <vfprintf+0x24e>
    152a:	88 37       	cpi	r24, 0x78	; 120
    152c:	21 f0       	breq	.+8      	; 0x1536 <vfprintf+0x254>
    152e:	b0 c0       	rjmp	.+352    	; 0x1690 <vfprintf+0x3ae>
    1530:	e9 2f       	mov	r30, r25
    1532:	e0 61       	ori	r30, 0x10	; 16
    1534:	be 2e       	mov	r11, r30
    1536:	b4 fe       	sbrs	r11, 4
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <vfprintf+0x272>
    153a:	fb 2d       	mov	r31, r11
    153c:	f4 60       	ori	r31, 0x04	; 4
    153e:	bf 2e       	mov	r11, r31
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <vfprintf+0x272>
    1542:	34 fe       	sbrs	r3, 4
    1544:	0a c0       	rjmp	.+20     	; 0x155a <vfprintf+0x278>
    1546:	29 2f       	mov	r18, r25
    1548:	26 60       	ori	r18, 0x06	; 6
    154a:	b2 2e       	mov	r11, r18
    154c:	06 c0       	rjmp	.+12     	; 0x155a <vfprintf+0x278>
    154e:	28 e0       	ldi	r18, 0x08	; 8
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	05 c0       	rjmp	.+10     	; 0x155e <vfprintf+0x27c>
    1554:	20 e1       	ldi	r18, 0x10	; 16
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x27c>
    155a:	20 e1       	ldi	r18, 0x10	; 16
    155c:	32 e0       	ldi	r19, 0x02	; 2
    155e:	f8 01       	movw	r30, r16
    1560:	b7 fe       	sbrs	r11, 7
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <vfprintf+0x290>
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	0c 5f       	subi	r16, 0xFC	; 252
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	06 c0       	rjmp	.+12     	; 0x157e <vfprintf+0x29c>
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 5f       	subi	r16, 0xFE	; 254
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	a3 01       	movw	r20, r6
    1580:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ultoa_invert>
    1584:	88 2e       	mov	r8, r24
    1586:	86 18       	sub	r8, r6
    1588:	fb 2d       	mov	r31, r11
    158a:	ff 77       	andi	r31, 0x7F	; 127
    158c:	3f 2e       	mov	r3, r31
    158e:	36 fe       	sbrs	r3, 6
    1590:	0d c0       	rjmp	.+26     	; 0x15ac <vfprintf+0x2ca>
    1592:	23 2d       	mov	r18, r3
    1594:	2e 7f       	andi	r18, 0xFE	; 254
    1596:	a2 2e       	mov	r10, r18
    1598:	89 14       	cp	r8, r9
    159a:	58 f4       	brcc	.+22     	; 0x15b2 <vfprintf+0x2d0>
    159c:	34 fe       	sbrs	r3, 4
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <vfprintf+0x2d4>
    15a0:	32 fc       	sbrc	r3, 2
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <vfprintf+0x2d4>
    15a4:	83 2d       	mov	r24, r3
    15a6:	8e 7e       	andi	r24, 0xEE	; 238
    15a8:	a8 2e       	mov	r10, r24
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <vfprintf+0x2d4>
    15ac:	b8 2c       	mov	r11, r8
    15ae:	a3 2c       	mov	r10, r3
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <vfprintf+0x2d6>
    15b2:	b8 2c       	mov	r11, r8
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <vfprintf+0x2d6>
    15b6:	b9 2c       	mov	r11, r9
    15b8:	a4 fe       	sbrs	r10, 4
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <vfprintf+0x2f8>
    15bc:	fe 01       	movw	r30, r28
    15be:	e8 0d       	add	r30, r8
    15c0:	f1 1d       	adc	r31, r1
    15c2:	80 81       	ld	r24, Z
    15c4:	80 33       	cpi	r24, 0x30	; 48
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <vfprintf+0x2ee>
    15c8:	9a 2d       	mov	r25, r10
    15ca:	99 7e       	andi	r25, 0xE9	; 233
    15cc:	a9 2e       	mov	r10, r25
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <vfprintf+0x300>
    15d0:	a2 fe       	sbrs	r10, 2
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <vfprintf+0x2fe>
    15d4:	b3 94       	inc	r11
    15d6:	b3 94       	inc	r11
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <vfprintf+0x300>
    15da:	8a 2d       	mov	r24, r10
    15dc:	86 78       	andi	r24, 0x86	; 134
    15de:	09 f0       	breq	.+2      	; 0x15e2 <vfprintf+0x300>
    15e0:	b3 94       	inc	r11
    15e2:	a3 fc       	sbrc	r10, 3
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <vfprintf+0x326>
    15e6:	a0 fe       	sbrs	r10, 0
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <vfprintf+0x314>
    15ea:	b2 14       	cp	r11, r2
    15ec:	88 f4       	brcc	.+34     	; 0x1610 <vfprintf+0x32e>
    15ee:	28 0c       	add	r2, r8
    15f0:	92 2c       	mov	r9, r2
    15f2:	9b 18       	sub	r9, r11
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <vfprintf+0x330>
    15f6:	b2 14       	cp	r11, r2
    15f8:	60 f4       	brcc	.+24     	; 0x1612 <vfprintf+0x330>
    15fa:	b6 01       	movw	r22, r12
    15fc:	80 e2       	ldi	r24, 0x20	; 32
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1604:	b3 94       	inc	r11
    1606:	f7 cf       	rjmp	.-18     	; 0x15f6 <vfprintf+0x314>
    1608:	b2 14       	cp	r11, r2
    160a:	18 f4       	brcc	.+6      	; 0x1612 <vfprintf+0x330>
    160c:	2b 18       	sub	r2, r11
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <vfprintf+0x332>
    1610:	98 2c       	mov	r9, r8
    1612:	21 2c       	mov	r2, r1
    1614:	a4 fe       	sbrs	r10, 4
    1616:	10 c0       	rjmp	.+32     	; 0x1638 <vfprintf+0x356>
    1618:	b6 01       	movw	r22, r12
    161a:	80 e3       	ldi	r24, 0x30	; 48
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1622:	a2 fe       	sbrs	r10, 2
    1624:	17 c0       	rjmp	.+46     	; 0x1654 <vfprintf+0x372>
    1626:	a1 fc       	sbrc	r10, 1
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <vfprintf+0x34e>
    162a:	88 e7       	ldi	r24, 0x78	; 120
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x352>
    1630:	88 e5       	ldi	r24, 0x58	; 88
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b6 01       	movw	r22, r12
    1636:	0c c0       	rjmp	.+24     	; 0x1650 <vfprintf+0x36e>
    1638:	8a 2d       	mov	r24, r10
    163a:	86 78       	andi	r24, 0x86	; 134
    163c:	59 f0       	breq	.+22     	; 0x1654 <vfprintf+0x372>
    163e:	a1 fe       	sbrs	r10, 1
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <vfprintf+0x364>
    1642:	8b e2       	ldi	r24, 0x2B	; 43
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <vfprintf+0x366>
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	a7 fc       	sbrc	r10, 7
    164a:	8d e2       	ldi	r24, 0x2D	; 45
    164c:	b6 01       	movw	r22, r12
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1654:	89 14       	cp	r8, r9
    1656:	38 f4       	brcc	.+14     	; 0x1666 <vfprintf+0x384>
    1658:	b6 01       	movw	r22, r12
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1662:	9a 94       	dec	r9
    1664:	f7 cf       	rjmp	.-18     	; 0x1654 <vfprintf+0x372>
    1666:	8a 94       	dec	r8
    1668:	f3 01       	movw	r30, r6
    166a:	e8 0d       	add	r30, r8
    166c:	f1 1d       	adc	r31, r1
    166e:	80 81       	ld	r24, Z
    1670:	b6 01       	movw	r22, r12
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    1678:	81 10       	cpse	r8, r1
    167a:	f5 cf       	rjmp	.-22     	; 0x1666 <vfprintf+0x384>
    167c:	22 20       	and	r2, r2
    167e:	09 f4       	brne	.+2      	; 0x1682 <vfprintf+0x3a0>
    1680:	42 ce       	rjmp	.-892    	; 0x1306 <vfprintf+0x24>
    1682:	b6 01       	movw	r22, r12
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 0f 09 	call	0x121e	; 0x121e <fputc>
    168c:	2a 94       	dec	r2
    168e:	f6 cf       	rjmp	.-20     	; 0x167c <vfprintf+0x39a>
    1690:	f6 01       	movw	r30, r12
    1692:	86 81       	ldd	r24, Z+6	; 0x06
    1694:	97 81       	ldd	r25, Z+7	; 0x07
    1696:	02 c0       	rjmp	.+4      	; 0x169c <vfprintf+0x3ba>
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	9f ef       	ldi	r25, 0xFF	; 255
    169c:	2b 96       	adiw	r28, 0x0b	; 11
    169e:	e2 e1       	ldi	r30, 0x12	; 18
    16a0:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__>

000016a4 <strnlen_P>:
    16a4:	fc 01       	movw	r30, r24
    16a6:	05 90       	lpm	r0, Z+
    16a8:	61 50       	subi	r22, 0x01	; 1
    16aa:	70 40       	sbci	r23, 0x00	; 0
    16ac:	01 10       	cpse	r0, r1
    16ae:	d8 f7       	brcc	.-10     	; 0x16a6 <strnlen_P+0x2>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	8e 0f       	add	r24, r30
    16b6:	9f 1f       	adc	r25, r31
    16b8:	08 95       	ret

000016ba <strnlen>:
    16ba:	fc 01       	movw	r30, r24
    16bc:	61 50       	subi	r22, 0x01	; 1
    16be:	70 40       	sbci	r23, 0x00	; 0
    16c0:	01 90       	ld	r0, Z+
    16c2:	01 10       	cpse	r0, r1
    16c4:	d8 f7       	brcc	.-10     	; 0x16bc <strnlen+0x2>
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	8e 0f       	add	r24, r30
    16cc:	9f 1f       	adc	r25, r31
    16ce:	08 95       	ret

000016d0 <__ultoa_invert>:
    16d0:	fa 01       	movw	r30, r20
    16d2:	aa 27       	eor	r26, r26
    16d4:	28 30       	cpi	r18, 0x08	; 8
    16d6:	51 f1       	breq	.+84     	; 0x172c <__ultoa_invert+0x5c>
    16d8:	20 31       	cpi	r18, 0x10	; 16
    16da:	81 f1       	breq	.+96     	; 0x173c <__ultoa_invert+0x6c>
    16dc:	e8 94       	clt
    16de:	6f 93       	push	r22
    16e0:	6e 7f       	andi	r22, 0xFE	; 254
    16e2:	6e 5f       	subi	r22, 0xFE	; 254
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	af 4f       	sbci	r26, 0xFF	; 255
    16ec:	b1 e0       	ldi	r27, 0x01	; 1
    16ee:	3e d0       	rcall	.+124    	; 0x176c <__ultoa_invert+0x9c>
    16f0:	b4 e0       	ldi	r27, 0x04	; 4
    16f2:	3c d0       	rcall	.+120    	; 0x176c <__ultoa_invert+0x9c>
    16f4:	67 0f       	add	r22, r23
    16f6:	78 1f       	adc	r23, r24
    16f8:	89 1f       	adc	r24, r25
    16fa:	9a 1f       	adc	r25, r26
    16fc:	a1 1d       	adc	r26, r1
    16fe:	68 0f       	add	r22, r24
    1700:	79 1f       	adc	r23, r25
    1702:	8a 1f       	adc	r24, r26
    1704:	91 1d       	adc	r25, r1
    1706:	a1 1d       	adc	r26, r1
    1708:	6a 0f       	add	r22, r26
    170a:	71 1d       	adc	r23, r1
    170c:	81 1d       	adc	r24, r1
    170e:	91 1d       	adc	r25, r1
    1710:	a1 1d       	adc	r26, r1
    1712:	20 d0       	rcall	.+64     	; 0x1754 <__ultoa_invert+0x84>
    1714:	09 f4       	brne	.+2      	; 0x1718 <__ultoa_invert+0x48>
    1716:	68 94       	set
    1718:	3f 91       	pop	r19
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	26 9f       	mul	r18, r22
    171e:	11 24       	eor	r1, r1
    1720:	30 19       	sub	r19, r0
    1722:	30 5d       	subi	r19, 0xD0	; 208
    1724:	31 93       	st	Z+, r19
    1726:	de f6       	brtc	.-74     	; 0x16de <__ultoa_invert+0xe>
    1728:	cf 01       	movw	r24, r30
    172a:	08 95       	ret
    172c:	46 2f       	mov	r20, r22
    172e:	47 70       	andi	r20, 0x07	; 7
    1730:	40 5d       	subi	r20, 0xD0	; 208
    1732:	41 93       	st	Z+, r20
    1734:	b3 e0       	ldi	r27, 0x03	; 3
    1736:	0f d0       	rcall	.+30     	; 0x1756 <__ultoa_invert+0x86>
    1738:	c9 f7       	brne	.-14     	; 0x172c <__ultoa_invert+0x5c>
    173a:	f6 cf       	rjmp	.-20     	; 0x1728 <__ultoa_invert+0x58>
    173c:	46 2f       	mov	r20, r22
    173e:	4f 70       	andi	r20, 0x0F	; 15
    1740:	40 5d       	subi	r20, 0xD0	; 208
    1742:	4a 33       	cpi	r20, 0x3A	; 58
    1744:	18 f0       	brcs	.+6      	; 0x174c <__ultoa_invert+0x7c>
    1746:	49 5d       	subi	r20, 0xD9	; 217
    1748:	31 fd       	sbrc	r19, 1
    174a:	40 52       	subi	r20, 0x20	; 32
    174c:	41 93       	st	Z+, r20
    174e:	02 d0       	rcall	.+4      	; 0x1754 <__ultoa_invert+0x84>
    1750:	a9 f7       	brne	.-22     	; 0x173c <__ultoa_invert+0x6c>
    1752:	ea cf       	rjmp	.-44     	; 0x1728 <__ultoa_invert+0x58>
    1754:	b4 e0       	ldi	r27, 0x04	; 4
    1756:	a6 95       	lsr	r26
    1758:	97 95       	ror	r25
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	ba 95       	dec	r27
    1762:	c9 f7       	brne	.-14     	; 0x1756 <__ultoa_invert+0x86>
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 05       	cpc	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	08 95       	ret
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	0a 2e       	mov	r0, r26
    1772:	06 94       	lsr	r0
    1774:	57 95       	ror	r21
    1776:	47 95       	ror	r20
    1778:	37 95       	ror	r19
    177a:	27 95       	ror	r18
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__ultoa_invert+0xa2>
    1780:	62 0f       	add	r22, r18
    1782:	73 1f       	adc	r23, r19
    1784:	84 1f       	adc	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	a0 1d       	adc	r26, r0
    178a:	08 95       	ret

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	09 94       	ijmp

000017c4 <__epilogue_restores__>:
    17c4:	2a 88       	ldd	r2, Y+18	; 0x12
    17c6:	39 88       	ldd	r3, Y+17	; 0x11
    17c8:	48 88       	ldd	r4, Y+16	; 0x10
    17ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    17cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d6:	b9 84       	ldd	r11, Y+9	; 0x09
    17d8:	c8 84       	ldd	r12, Y+8	; 0x08
    17da:	df 80       	ldd	r13, Y+7	; 0x07
    17dc:	ee 80       	ldd	r14, Y+6	; 0x06
    17de:	fd 80       	ldd	r15, Y+5	; 0x05
    17e0:	0c 81       	ldd	r16, Y+4	; 0x04
    17e2:	1b 81       	ldd	r17, Y+3	; 0x03
    17e4:	aa 81       	ldd	r26, Y+2	; 0x02
    17e6:	b9 81       	ldd	r27, Y+1	; 0x01
    17e8:	ce 0f       	add	r28, r30
    17ea:	d1 1d       	adc	r29, r1
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ed 01       	movw	r28, r26
    17f8:	08 95       	ret

000017fa <_exit>:
    17fa:	f8 94       	cli

000017fc <__stop_program>:
    17fc:	ff cf       	rjmp	.-2      	; 0x17fc <__stop_program>
